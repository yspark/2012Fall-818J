%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: TrainTestSet.pdf
%%Creator: Adobe Acrobat 9.5.2
%%For: syys
%%CreationDate: 2012-12-15, ¿ÀÈÄ 11:20:41
%%BoundingBox: -1 0 580 333
%%HiResBoundingBox: 0 0 579.0879 332.0104
%%CropBox: 0 0 579.0879 332.0104
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1176 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2012-12-15T13:15:03-05:00"
   xmp:CreatorTool="MicrosoftÂ® VisioÂ® 2010"
   xmp:ModifyDate="2012-12-15T23:20:28-05:00"
   xmp:MetadataDate="2012-12-15T23:20:28-05:00"
   pdf:Keywords=""
   pdf:Producer="MicrosoftÂ® VisioÂ® 2010"
   xmpMM:DocumentID="uuid:7e8fc271-a9f8-4405-b4da-dd54c471c2c4"
   xmpMM:InstanceID="uuid:808a94aa-b369-43cb-b2db-49881496c224">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>klee</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -332.01 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 332.01 li
579.088 332.01 li
579.088 0 li
cp
clp
[1 0 0 1 -144.567 0 ]ct
311.81 165.4 mo
340.156 165.4 li
340.156 155.479 li
311.81 155.479 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
.051 sep
ef
.72 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
311.81 165.4 mo
340.156 165.4 li
340.156 155.479 li
311.81 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+VERDANA Initial
ct_T42Dict begin
-0.559 -0.301 1.445 1.051
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+VERDANA
Type42DictBegin
[<00010000000c000c000c000c4f532f3272537b91000000cc000000606376
74204ca241020000012c000001986670676da4ce6d51000002c4000002ba
676c79667d12f275000021d4000012ae68656164da7765b6000005800000
0036686865610f270847000005b800000024686d747853a20ab5000005dc
0000081c6c6f6361bf36c34500000df8000007706d617870062b036b0000
1568000000206e616d659bb179b5000015880000094d707265700870ef40
00001ed8000002fc67646972000000000000000000000000000204110190
00050008059a053300000125059a0533000003a0007802a70800020b0604
030504040204a10006ff4000205b00000010000000004d53202000400021
0072061efe5900ca080b01ae2000019f00000000045d05d1000000200001
061e061405f005d1047c045d03dd00100000ffe7ffe1fe78fe64fe590394
001f0000009600aa00b900c600ce000000000000000000bc00c200000000
007600b200c000cb0000000000000000000000000081009400a600cc00da
00ef00000000000000000098009e00ab00b0000000000000000000000000
00900098009e00a400a900ae00b300ba00c3000000880091009800a500ac
00000000000000000000006f0087008f009b00a000d3011d000000000000
00c3021401c20000000000e9000c02d10173018e001a002c0044005c0073
007e008600b200c8014c001a003d00440050005c00720078009200b200b9
00c8000000000000000000000000000000000000003d0056005d006a006e
00b100b900c100000000002a003d00540064006a00b100b9000000000000
0071007a008900a100a700bb006f007a00870091009a0000000000000000
00000000000000000000008102210221007400e500b900ca019502c600ac
00a700850614000a000005d1001f0000045d001f00000000ffe10000fe64
fff50000036202f402a2029100af026a004c401555543736322f2e2d2c26
251f141312110d0c0504022c20b003254523452361688a204568208a2344
60442d2c4b525845441b2121592d2c202045684420b001602045b0467668
188a4560442d2cb0122bb0022545b00225456ab0408b60b0022523442121
212d2cb0132bb0022545b00225456ab8ffc08c60b0022523442121212d2c
2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361
592d2cb100032545685458b0032545b0032545606820b004252344b00425
23441bb00325204568208a2344b00325456860b003252344592d2cb00325
204568208a2344b00325456860b0032523442d2cb00943588721c01bb012
43588745b0112bb0472344b0477ae41b038a45186920b04723448a8a8720
b0a05158b0112bb0472344b0477ae41b21b0477ae4595959182d2c4b5258
45441b2121592d2c462346608a8a462320468a608a61b8ff806223201023
8ab14b4b8a70456020b0005058b00161b8ffba8b1bb0468c59b010606801
3a2d2c2045b003254652583f1b2111592d2c21210c6423648bb84000622d
2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c0
51580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840
00626023212d2cb0134358031b02592d2c4b53234b515a5820458a60441b
2121592d2c4b53234b515a58381b2121592d2cb1020042b123018851b140
0188535a58b910000020885458b202010243604259b12401885158b92000
0040885458b2020202436042b12401885458b2022002436042004b014b52
58b2020802436042591bb940000080885458b202040243604259b9400000
8063b80100885458b202080243604259b94000010063b80200885458b202
100243604259b94000020063b80400885458b20240024360425959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00000001
000000050ccd825bf8305f0f3cf5001b080000000000aa7e442900000000
c9acc9c7fb86fd930b93086800000009000200000000000000010000080b
fe5200000c2cfb86fd710b93000100000000000000000000000000000057
080001000000000002d00000000000000326012303ac00a8000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000516008905160116051600a10516
00a70516004d051600bb051600890516009a0516007a0516007100000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000006be00c80000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000004fc006c000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000036a00b900000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000001f001f001f001f0064008d008d008d008d008d008d
008d008d008d008d008d008d008d008d0120019a024c031503cd04730526
0571066e0718071807180718071807180718071807180718071807180718
071807180718071807180718071807f507f507f507f507f507f507f507f5
07f507f507f507f507f507f507f507f507f507f507f507f507f507f507f5
08ce08ce08ce08ce08ce08ce08ce08ce08ce08ce08ce08ce08ce08ce0957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
095709570957095709570957095709570957095709570957095709570957
09570957095709570957095709570957095709570001000003b7003e0003
0000000000020010002f00560000020a02fc000000000000002e022e0001
000000000000003200000001000000000001000700320001000000000002
0007007f00010000000000030032006d0001000000000004000700320001
000000000005000c00870001000000000006000700320001000000000007
003b00320001000000000009000e009f000100000000000d014c00ad0001
00000000000e002a01f90003000104030002000c02230003000104050002
001002330003000104060002000c024300030001040700020010024f0003
0001040800020010025f00030001040900000064026f0003000104090001
000e02d30003000104090002000e036d0003000104090003006403490003
000104090004000e02d300030001040900050018037d0003000104090006
000e02d30003000104090007007602d30003000104090009001c03ad0003
00010409000d029803c9000300010409000e0054066100030001040a0002
000c022300030001040b0002001006b500030001040c0002000c02230003
0001040e0002000c06c50003000104100002000e06d50003000104130002
001206e30003000104140002000c02230003000104150002001002230003
000104160002000c02230003000104190002000e06f500030001041b0002
001006c500030001041d0002000c022300030001041f0002000c02230003
000104240002000e070300030001042d0002000e071100030001080a0002
000c02230003000108160002000c0223000300010c0a0002000c02230003
00010c0c0002000c0223a92032303131204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
56657264616e6120697320612074726164656d61726b206f662074686520
4d6963726f736f66742067726f7570206f6620636f6d70616e6965732e4d
6963726f736f66743a56657264616e6120526567756c61723a5665727369
6f6e20352e303320284d6963726f736f6674294d61747468657720436172
746572596f75206d617920757365207468697320666f6e74206173207065
726d6974746564206279207468652045554c4120666f7220746865207072
6f6475637420696e207768696368207468697320666f6e7420697320696e
636c7564656420746f20646973706c617920616e64207072696e7420636f
6e74656e742e20596f75206d6179206f6e6c792028692920656d62656420
7468697320666f6e7420696e20636f6e74656e74206173207065726d6974
7465642062792074686520656d62656464696e6720726573747269637469
6f6e7320696e636c7564656420696e207468697320666f6e743b20616e64
20286969292074656d706f726172696c7920646f776e6c6f616420746869
7320666f6e7420746f2061207072696e746572206f72206f74686572206f
75747075742064657669636520746f2068656c70207072696e7420636f6e
74656e742e687474703a2f2f7777772e6d6963726f736f66742e636f6d2f
7479706f6772617068792f666f6e74732f004e006f0072006d0061006c00
6e0079006f00620079010d0065006a006e00e9006e006f0072006d006100
6c005300740061006e0064006100720064039a03b103bd03bf03bd03b903
ba03ac00a9002000320030003100310020004d006900630072006f007300
6f0066007400200043006f00720070006f0072006100740069006f006e00
2e00200041006c006c002000520069006700680074007300200052006500
7300650072007600650064002e00560065007200640061006e0061002000
69007300200061002000740072006100640065006d00610072006b002000
6f006600200074006800650020004d006900630072006f0073006f006600
74002000670072006f007500700020006f006600200063006f006d007000
61006e006900650073002e004d006900630072006f0073006f0066007400
3a00560065007200640061006e006100200052006500670075006c006100
72003a00560065007200730069006f006e00200035002e00300035002000
28004d006900630072006f0073006f006600740029004d00610074007400
680065007700200043006100720074006500720059006f00750020006d00
61007900200075007300650020007400680069007300200066006f006e00
740020006100730020007000650072006d00690074007400650064002000
6200790020007400680065002000450055004c004100200066006f007200
20007400680065002000700072006f006400750063007400200069006e00
20007700680069006300680020007400680069007300200066006f006e00
7400200069007300200069006e0063006c00750064006500640020007400
6f00200064006900730070006c0061007900200061006e00640020007000
720069006e007400200063006f006e00740065006e0074002e0020005900
6f00750020006d006100790020006f006e006c0079002000280069002900
200065006d0062006500640020007400680069007300200066006f006e00
7400200069006e00200063006f006e00740065006e007400200061007300
20007000650072006d006900740074006500640020006200790020007400
68006500200065006d00620065006400640069006e006700200072006500
73007400720069006300740069006f006e007300200069006e0063006c00
7500640065006400200069006e0020007400680069007300200066006f00
6e0074003b00200061006e00640020002800690069002900200074006500
6d0070006f0072006100720069006c007900200064006f0077006e006c00
6f006100640020007400680069007300200066006f006e00740020007400
6f002000610020007000720069006e0074006500720020006f0072002000
6f00740068006500720020006f0075007400700075007400200064006500
7600690063006500200074006f002000680065006c007000200070007200
69006e007400200063006f006e00740065006e0074002e00680074007400
70003a002f002f007700770077002e006d006900630072006f0073006f00
660074002e0063006f006d002f007400790070006f006700720061007000
680079002f0066006f006e00740073002f004e006f0072006d0061006100
6c0069004e006f0072006d00e1006c006e0065004e006f0072006d006100
6c0065005300740061006e00640061006100720064041e0431044b044704
3d044b0439004e0061007600610064006e006f0041007200720075006e00
740061000000b90054ffc0401eb229323610b220b240b250b270b280b2a0
b2b0b2d0b2e0b20ac0b2f0b202b8ffc04070b51718361f44010f561f5602
4f555f55026f54019f54af54025153170452531604535215044a49520446
4937044749320448493204493539043c3f32043d3f3d043e3f2104433f1d
04423f5204413f5204403f52043f35320432336404333534043534540434
351e04d034e034f03403b8ffeeb3b4254836b8ffe0b3b4102336b8ffee40
0db4090f36b41a480476b386b302b8fff0b3b3254836b8fffa40ffb30924
36b314480489881304706c7078020f9cdf9e02409d161936409c161b3640
971719364096171b368685131f0f840f850f8e0f8f0f901f841f8e1f8f2f
8e808580888f919085908790880f40820910360f721f72024071090c360f
6d0120c80120c7013fc6efc60220c540c50200620100621062024061a061
020f5b012d1411042c1425042b1439042a141304291415041f141e042120
430420143c04c91a45041a1b47041b1a3c041a1432041514390413144804
12141a0411141a0470140140144143360f0e2a1f0006010dc34b1f0cc24b
1f0ac04b1f09c04b1f05bc4b1f04bd4b1f03b94b1f02ba4b1f01b64b1f00
b74b1fc3c22a1fc0bf2a1fbd4056bc211fbab9211fb7b6211fc2c3c40dbf
c0c10dbcbdbe0cb9babb0cb6b7b80c10bc80bc0240b980b9020fb63fb64f
b67fb6040fb62fb63fb66fb67fb6bfb6cfb6ffb6080a0937040c0d020504
02030202010002500501b801ff01b0124b004b5442b013014b004b5342b1
09322b4bb0645242858d8d1db0964b5258b0801d59b808004b5458b001b0
018e59b0084b5358b001b0018e59002b2b2b2b2b737473732b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2bb00345b006456861b006234473b00345
b00e456861b00e2344b00e45b00f456861b00f23442b01b0144568b01423
442b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373737373737373732b73
2b732b2b2b2b2b73732b2b2b2b732b2b2b2b00752b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b73747373742b73742b2b00>
[4783 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1176 22 <000100a7ffe1047c05f0003d00e240580b0b052f1a0b152f290b262f293c
3c0b35143122342f4a0b45144322432f56015905590b552f6a0b662f6a3c
780b762f74357b3c1a343a443a023b3a1e491f012d112d022d2d294a1f09
31020f0d1f0d020d0d114a090a23b8fff8b40b0b425523b8fffc401c0c0c
42552321370c0c0c025537040d0d025537060c0c0655371e2e16b8fff8b4
0b0b425516b8fffc40240c0c42551621032e1e3a37040c031a0c0c025503
0c0c0c065503a03f0f3f1f3f020c9a3e10e65d10e62b2b11173910ed2b2b
2f2f2f2b2b2bed2b2b003fed332f5d3f1239ed332f5d2ffd39395d31305d
011616151406070606232226273533161633323637363635342627262623
233533323635342627262623220607233536363332161716161514060715
1616040e303e4a434bcb797cf04d0f55e66b3f8e2c2e2d332d2d804a5a46
98b52e292b623e5fd65f0a47ed6f6da643484aaf77307c02cd2b826766aa
3f46433b23d1384a2a292c6a5150691e1f17a67f7a36511a1a14443ed123
3b282c30885b7cb9180e0833>PBAAAA+VERDANA AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>PBAAAA+VERDANA AddT42Char 
PBAAAA+VERDANA /CharStrings get begin
/three 22 def
end
PBAAAA+VERDANA /Encoding get
dup 51 /three put
pop
end
%ADOEndSubsetFont
/MFKJYV+VERDANA /PBAAAA+VERDANA findfont ct_VMDictPut
/MFKJYV+VERDANA*1 
[51{/.notdef}rp /three 204{/.notdef}rp]
MFKJYV+VERDANA nf
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
323.12 164.14 mo
(3)sh
340.16 165.4 mo
368.506 165.4 li
368.506 155.479 li
340.16 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
340.16 165.4 mo
368.506 165.4 li
368.506 155.479 li
340.16 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+VERDANA gcheck setglobal} if
1 1578 23 <0002004d000004b305d1000a000d0134406908080b0b425509080b0b4255
01080b0b425502080b0b425508100c0c425509100c0c425501100c0c4255
02100c0c425508040d0d425509040d0d425501040d0d425502040d0d4255
040d140d240d340d440d700d060c180c0c06550c0d480606070c0607090d
490105b8ffc040190c0c0655050503070303083f0a4f0a020a0f0f1f0f02
070c04b8fff4b40c0c025504b8fff3400e0c0c065504200a090d064f0601
01b8ffe4400b0b0b0255010a0c0c025501b8fffab40d0d025501b8ffee40
320c0c065501010f061f063f060306261010025506020f0f025506180909
0255060c0b0b0255060c0c0c025506180c0c0655062f2b2b2b2b2b2b5d33
2f2b2b2b2b5d12393333ed2b2b39395d2f5d003f3f12392f2b3cfd321239
393130018710fd04c02b015d2b2b2b2b2b2b2b2b2b2b2b2b012311231121
350133113321110104b3ddc0fd3702d1b8ddfe63fdbf01a3fe5d01a3e603
48fc7202a0fd6000>PBAAAA+VERDANA AddT42Char 
PBAAAA+VERDANA /CharStrings get begin
/four 23 def
end
PBAAAA+VERDANA /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYV+VERDANA*1 
[51{/.notdef}rp /three /four 203{/.notdef}rp]
MFKJYV+VERDANA nf
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
351.47 164.14 mo
(4)sh
425.2 165.4 mo
453.546 165.4 li
453.546 155.479 li
425.2 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
425.2 165.4 mo
453.546 165.4 li
453.546 155.479 li
425.2 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
436.51 164.14 mo
(3)sh
453.54 165.4 mo
481.886 165.4 li
481.886 155.479 li
453.54 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
453.54 165.4 mo
481.886 165.4 li
481.886 155.479 li
453.54 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
464.86 164.14 mo
(4)sh
538.58 165.4 mo
566.926 165.4 li
566.926 155.479 li
538.58 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
538.58 165.4 mo
566.926 165.4 li
566.926 155.479 li
538.58 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
549.89 164.14 mo
(3)sh
368.5 165.4 mo
396.846 165.4 li
396.846 155.479 li
368.5 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
368.5 165.4 mo
396.846 165.4 li
396.846 155.479 li
368.5 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+VERDANA gcheck setglobal} if
1 576 20 <000101160000043c05d6000f00ba40190d080b0b42550e080b0b42550d10
0c0c42550e100c0c425504b8fffcb40d0d425503b8fffc40390d0d425505
4606060c030e034801080f111f110205021f0f010f0f0c0e0c0c0c02550e
0d0c0c06550e20023f036f03700303030c1010025503b8ffe0400b0f0f02
5503160909025503b8fff4401d0b0b0255031e0c0c025503060d0d025503
100d0d065503100c0c0655032f2b2b2b2b2b2b2b2b5d33ed2b2b39322f5d
2f335d003ffd323f332fed3130012b2b2b2b2b2b21213521112135323637
363637331121043cfcda0136feca3f90252e35049b01309803e688151419
4d41fac2>PBAAAA+VERDANA AddT42Char 
PBAAAA+VERDANA /CharStrings get begin
/one 20 def
end
PBAAAA+VERDANA /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYV+VERDANA*1 
[49{/.notdef}rp /one /.notdef /three /four 203{/.notdef}rp]
MFKJYV+VERDANA nf
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
379.82 164.14 mo
(1)sh
396.85 165.4 mo
425.196 165.4 li
425.196 155.479 li
396.85 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
396.85 165.4 mo
425.196 165.4 li
425.196 155.479 li
396.85 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+VERDANA gcheck setglobal} if
1 820 21 <000100a10000049105f0002000fd4051501f601f02050306111603151124
113b05380d350e3f1d3f1e391f4b05480d450e4f1d4f1e491f5f035d045d
055b0956115f195e1b5d1c5f1d5f1e6a036406651162156f1e700274117f
1a7f1c7f1e2503b8ffe8b40c0c065502b8ffe840310c0c0655000f100f2d
082f1c300f400f060f400c0c02550f400c0d06550f400c0c42550f0f0b4a
1302021f4a01081f0208b8fff8b40b0b425508b8fffc40190c0c42550821
160c0f0f0255160c0909025516040b0b025516b8fff440190c0c02551616
0c0c06551616209e220f221f2202101002992110f6322f5d10f6322f2b2b
2b2b2bed2b2b1239003ffd323fed332f2b2b2b5d31302b2b5d015d212135
363637363635342623220607233536363332041514060706060706060721
0491fc1069d35bc08e99895bd4650a47ed6fe501042b2a27694b6be46303
21d15ab459badb7f74834042d2233addbd5593423e784969c554>PBAAAA+VERDANA AddT42Char 
PBAAAA+VERDANA /CharStrings get begin
/two 21 def
end
PBAAAA+VERDANA /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYV+VERDANA*1 
[49{/.notdef}rp /one /two /three /four 203{/.notdef}rp]
MFKJYV+VERDANA nf
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
408.16 164.14 mo
(2)sh
481.89 165.4 mo
510.236 165.4 li
510.236 155.479 li
481.89 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
481.89 165.4 mo
510.236 165.4 li
510.236 155.479 li
481.89 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
493.2 164.14 mo
(1)sh
510.24 165.4 mo
538.586 165.4 li
538.586 155.479 li
510.24 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
510.24 165.4 mo
538.586 165.4 li
538.586 155.479 li
510.24 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
521.55 164.14 mo
(2)sh
311.81 151.22 mo
340.156 151.22 li
340.156 141.299 li
311.81 141.299 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.00604257 .167544 .248875 0 cmyk
ef
311.81 151.22 mo
340.156 151.22 li
340.156 141.299 li
311.81 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
323.12 149.96 mo
(3)sh
340.16 151.22 mo
368.506 151.22 li
368.506 141.299 li
340.16 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
340.16 151.22 mo
368.506 151.22 li
368.506 141.299 li
340.16 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
351.47 149.96 mo
(4)sh
425.2 151.22 mo
453.546 151.22 li
453.546 141.299 li
425.2 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
425.2 151.22 mo
453.546 151.22 li
453.546 141.299 li
425.2 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
436.51 149.96 mo
(3)sh
453.54 151.22 mo
481.886 151.22 li
481.886 141.299 li
453.54 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
453.54 151.22 mo
481.886 151.22 li
481.886 141.299 li
453.54 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
464.86 149.96 mo
(4)sh
538.58 151.22 mo
566.926 151.22 li
566.926 141.299 li
538.58 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
538.58 151.22 mo
566.926 151.22 li
566.926 141.299 li
538.58 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
549.89 149.96 mo
(3)sh
368.5 151.22 mo
396.846 151.22 li
396.846 141.299 li
368.5 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
368.5 151.22 mo
396.846 151.22 li
396.846 141.299 li
368.5 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
379.82 149.96 mo
(1)sh
396.85 151.22 mo
425.196 151.22 li
425.196 141.299 li
396.85 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
396.85 151.22 mo
425.196 151.22 li
425.196 141.299 li
396.85 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
408.16 149.96 mo
(2)sh
481.89 151.22 mo
510.236 151.22 li
510.236 141.299 li
481.89 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
481.89 151.22 mo
510.236 151.22 li
510.236 141.299 li
481.89 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
493.2 149.96 mo
(1)sh
510.24 151.22 mo
538.586 151.22 li
538.586 141.299 li
510.24 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
510.24 151.22 mo
538.586 151.22 li
538.586 141.299 li
510.24 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
521.55 149.96 mo
(2)sh
311.81 165.4 mo
340.156 165.4 li
340.156 155.479 li
311.81 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
311.81 165.4 mo
340.156 165.4 li
340.156 155.479 li
311.81 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+VERDANA gcheck setglobal} if
1 282 19 <00020089ffe1048f05ef000b002300a940223601390b340c3b123b18341e
4501490b440c4b124b18441e0c154909022149030a0fb8fff8b40b0b4255
0fb8fffcb40c0c42550fb8fff4b60c0c02550f2100b8fff0b40f0f025500
b8fff440270b0b025500180c0c0255009e250f251f25021b080b0b42551b
040c0c42551b0c0c0c02551b2106b8fff040130f0f025506100909025506
0c0b0b025506982410f62b2b2bed2b2b2b5d10f62b2b2bed2b2b2b003fed
3fed31305d01100221200211101221201201363635342627262623220607
0606151416171616333236048ffbfef8fef4f7fa0109010cf7fef9231919
2423795f5e7b24221916242179645e7c02e9fe6ffe89017c018a018d017b
fe7ffcb551db9a98e04e4d4e4e4f4aee8e9cd2534e524e00>PBAAAA+VERDANA AddT42Char 
1 1946 24 <000100bbffe1048505d1002a00c9405521040d0d425522040d0d42550a08
1a082b083d0835113d164b0844115a0854296a087a080c1d1d1a490f251f
2540250325400d0d425525214a25061e020f0a1f0a020a0a0e4a060a2022
080b0c425522204f1d011db8ffec40180b0b02551d160c0c02551d0e0d0d
02551d100c0c06551d14b8fff8b40b0b425514b8fffc401b0c0c42551421
00201d0900160c0c0255009f2c0f2c1f2c02099b2b10e65d10e62b113939
10ed2b2b2f2b2b2b2b5ded2b2f003fed332f5d3f1239ed2f2b5dfd322f31
305d012b2b01140607060623222627353316163332363736363534262726
26232206071121152111363633321617161604854c4248c7837ae24e0e52
dc6a4785342c2d352f34955c58a33b0380fd412b5a2179b64c505801d968
be41464b3324d3344928322b784f4d6a20261f180c02ffaffe7404042934
37ae>PBAAAA+VERDANA AddT42Char 
PBAAAA+VERDANA /CharStrings get begin
/zero 19 def
/five 24 def
end
PBAAAA+VERDANA /Encoding get
dup 48 /zero put
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYV+VERDANA*1 
[48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]
MFKJYV+VERDANA nf
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
320.26 164.14 mo
(5)sh
325.982 164.14 mo
(0)sh
340.16 165.4 mo
368.506 165.4 li
368.506 155.479 li
340.16 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
340.16 165.4 mo
368.506 165.4 li
368.506 155.479 li
340.16 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
348.61 164.14 mo
(5)sh
354.332 164.14 mo
(3)sh
425.2 165.4 mo
453.546 165.4 li
453.546 155.479 li
425.2 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
425.2 165.4 mo
453.546 165.4 li
453.546 155.479 li
425.2 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
433.65 164.14 mo
(4)sh
439.372 164.14 mo
(2)sh
453.54 165.4 mo
481.886 165.4 li
481.886 155.479 li
453.54 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
453.54 165.4 mo
481.886 165.4 li
481.886 155.479 li
453.54 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
461.99 164.14 mo
(3)sh
467.712 164.14 mo
(3)sh
538.58 165.4 mo
566.926 165.4 li
566.926 155.479 li
538.58 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
538.58 165.4 mo
566.926 165.4 li
566.926 155.479 li
538.58 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+VERDANA gcheck setglobal} if
1 2278 25 <00020089ffe104a705ed0022003700b84033060d160d3925333133374925
423143375f01560d50205021652175310e1a0329491d1313174a1d030f02
3549030a1a2c2f1223b8fff8b40b0b425523b8fffc400a0c0c4255232100
120900b8ffeeb40f0f025500b8fff4400b0b0b0255000c0c0c025500b8ff
ec401b0d0d0255009c390f391f39022f080b0b42552f040c0c42552f2109
b8fff4b60f0f025509983810f62bed2b2b5d10e62b2b2b2b113910ed2b2b
2f123939003fed3f1239fd322f2fed123931305d01140023222627260235
341237362433321617152326262322000736363332161716160734262726
2623220607060615141617161633323604a7fed5d96eb445565d555d5801
16b93b50290a1c713bd7ff001554a36b5f914c5859cb373f2e703d55924d
020241392e6b3f91a601e3e3fee14443530112c1c6013277717f0a0dbf0f
1bfef3e5333523353dba8d5d7a2d2014282a16291f9eb7352c29b100>PBAAAA+VERDANA AddT42Char 
1 2786 27 <0003007affde049c05f3001900280037014eb90026fff4b40d0f025525b8
fff4b40d0f025524b8fff4b40d0f025523b8fff4b40d0f025522b8fff440
550d0f02552d2b3415332234273433441541224427453350155b195a1b5a
1f54225f2b592c5f31543354376008620e6212621960236027760e76127b
2c86121d0602a926a62f0226160a2f04031d4710023548030a1ab8fff8b4
0b0b42551ab8fffc40100c0d42551a200013011313002f0a0d29b8fff8b4
0b0b425529b8fffc40270c0c425529210016262000160c0c0255009d390f
391f390220080b0b425520040c0d425520210db8fff440170f0f02550d0d
32080b0b425532040c0c4255322106973810f6ed2b2b332f2bed2b2b5d10
e42b11393910ed2b2b11393911332f71ed2b2b003fed3fed1217395d4354
58401e592c892c02292c3203352f292f36234523562364239926061a2023
03261d111217395d111217395d5931305d2b2b2b2b2b0114002322243534
363735262635342433320415140607151616033426232206151416171616
173636133426272626270606151416333236049cfed3e4f2fee190837873
0114d5df010a7e7a8c94eda5807ea15152258b42634c1f51762f705d5a6d
ba8f92af019fc1ff00fac37cc93b06409872a8e0d6a565c337063cb0024f
6b7f7866486929123a13428efd735c6f3816262231a86a87b096>PBAAAA+VERDANA AddT42Char 
PBAAAA+VERDANA /CharStrings get begin
/six 25 def
/eight 27 def
end
PBAAAA+VERDANA /Encoding get
dup 54 /six put
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYV+VERDANA*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/.notdef /eight 199{/.notdef}rp]
MFKJYV+VERDANA nf
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
547.03 164.14 mo
(6)sh
552.752 164.14 mo
(8)sh
368.5 165.4 mo
396.846 165.4 li
396.846 155.479 li
368.5 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
368.5 165.4 mo
396.846 165.4 li
396.846 155.479 li
368.5 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
376.96 164.14 mo
(5)sh
382.682 164.14 mo
(2)sh
396.85 165.4 mo
425.196 165.4 li
425.196 155.479 li
396.85 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
396.85 165.4 mo
425.196 165.4 li
425.196 155.479 li
396.85 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+VERDANA gcheck setglobal} if
1 2636 26 <0001009a0000049505d10006006eb90003fff8b40c0c425502b8fff8b40c
0c425503b8fffb40360b0b425509010a02240148014b0258027903070301
000120020203000002034a050302080f081f087b020303000202040f0001
0000042f332f5d12392f12395d003f3ffd11392f3130018710ed87c0015d
012b2b2b010123012135210495fd5ed602cdfcb003fb04f2fb0e0522af00
>PBAAAA+VERDANA AddT42Char 
PBAAAA+VERDANA /CharStrings get begin
/seven 26 def
end
PBAAAA+VERDANA /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYV+VERDANA*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight 199{/.notdef}rp]
MFKJYV+VERDANA nf
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
405.3 164.14 mo
(4)sh
411.022 164.14 mo
(7)sh
481.89 165.4 mo
510.236 165.4 li
510.236 155.479 li
481.89 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
481.89 165.4 mo
510.236 165.4 li
510.236 155.479 li
481.89 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
490.34 164.14 mo
(4)sh
496.062 164.14 mo
(8)sh
510.24 165.4 mo
538.586 165.4 li
538.586 155.479 li
510.24 155.479 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
510.24 165.4 mo
538.586 165.4 li
538.586 155.479 li
510.24 155.479 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
518.69 164.14 mo
(5)sh
524.412 164.14 mo
(5)sh
311.81 151.22 mo
340.156 151.22 li
340.156 141.299 li
311.81 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
311.81 151.22 mo
340.156 151.22 li
340.156 141.299 li
311.81 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
320.26 149.96 mo
(5)sh
325.982 149.96 mo
(1)sh
340.16 151.22 mo
368.506 151.22 li
368.506 141.299 li
340.16 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
340.16 151.22 mo
368.506 151.22 li
368.506 141.299 li
340.16 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
348.61 149.96 mo
(5)sh
354.332 149.96 mo
(3)sh
425.2 151.22 mo
453.546 151.22 li
453.546 141.299 li
425.2 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
425.2 151.22 mo
453.546 151.22 li
453.546 141.299 li
425.2 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
433.65 149.96 mo
(4)sh
439.372 149.96 mo
(4)sh
453.54 151.22 mo
481.886 151.22 li
481.886 141.299 li
453.54 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
453.54 151.22 mo
481.886 151.22 li
481.886 141.299 li
453.54 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
461.99 149.96 mo
(3)sh
467.712 149.96 mo
(4)sh
538.58 151.22 mo
566.926 151.22 li
566.926 141.299 li
538.58 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
538.58 151.22 mo
566.926 151.22 li
566.926 141.299 li
538.58 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
547.03 149.96 mo
(6)sh
552.752 149.96 mo
(5)sh
368.5 151.22 mo
396.846 151.22 li
396.846 141.299 li
368.5 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
368.5 151.22 mo
396.846 151.22 li
396.846 141.299 li
368.5 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
376.96 149.96 mo
(5)sh
382.682 149.96 mo
(4)sh
396.85 151.22 mo
425.196 151.22 li
425.196 141.299 li
396.85 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
396.85 151.22 mo
425.196 151.22 li
425.196 141.299 li
396.85 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
405.3 149.96 mo
(4)sh
411.022 149.96 mo
(2)sh
481.89 151.22 mo
510.236 151.22 li
510.236 141.299 li
481.89 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
481.89 151.22 mo
510.236 151.22 li
510.236 141.299 li
481.89 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
490.34 149.96 mo
(5)sh
496.062 149.96 mo
(5)sh
510.24 151.22 mo
538.586 151.22 li
538.586 141.299 li
510.24 141.299 li
cp
.00604257 .167544 .248875 0 cmyk
ef
510.24 151.22 mo
538.586 151.22 li
538.586 141.299 li
510.24 141.299 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
518.69 149.96 mo
(5)sh
524.412 149.96 mo
(7)sh
311.81 179.48 mo
340.156 179.48 li
340.156 169.559 li
311.81 169.559 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
311.81 179.48 mo
340.156 179.48 li
340.156 169.559 li
311.81 169.559 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
320.26 178.22 mo
(5)sh
325.982 178.22 mo
(0)sh
340.16 179.48 mo
368.506 179.48 li
368.506 169.559 li
340.16 169.559 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
340.16 179.48 mo
368.506 179.48 li
368.506 169.559 li
340.16 169.559 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
348.61 178.22 mo
(5)sh
354.332 178.22 mo
(5)sh
425.2 179.48 mo
453.546 179.48 li
453.546 169.559 li
425.2 169.559 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
425.2 179.48 mo
453.546 179.48 li
453.546 169.559 li
425.2 169.559 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
433.65 178.22 mo
(4)sh
439.372 178.22 mo
(3)sh
453.54 179.48 mo
481.886 179.48 li
481.886 169.559 li
453.54 169.559 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
453.54 179.48 mo
481.886 179.48 li
481.886 169.559 li
453.54 169.559 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
461.99 178.22 mo
(3)sh
467.712 178.22 mo
(2)sh
538.58 179.48 mo
566.926 179.48 li
566.926 169.559 li
538.58 169.559 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
538.58 179.48 mo
566.926 179.48 li
566.926 169.559 li
538.58 169.559 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
547.03 178.22 mo
(7)sh
552.752 178.22 mo
(1)sh
368.5 179.48 mo
396.846 179.48 li
396.846 169.559 li
368.5 169.559 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
368.5 179.48 mo
396.846 179.48 li
396.846 169.559 li
368.5 169.559 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
376.96 178.22 mo
(5)sh
382.682 178.22 mo
(1)sh
396.85 179.48 mo
425.196 179.48 li
425.196 169.559 li
396.85 169.559 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
396.85 179.48 mo
425.196 179.48 li
425.196 169.559 li
396.85 169.559 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
405.3 178.22 mo
(4)sh
411.022 178.22 mo
(3)sh
481.89 179.48 mo
510.236 179.48 li
510.236 169.559 li
481.89 169.559 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
481.89 179.48 mo
510.236 179.48 li
510.236 169.559 li
481.89 169.559 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
490.34 178.22 mo
(5)sh
496.062 178.22 mo
(2)sh
510.24 179.48 mo
538.586 179.48 li
538.586 169.559 li
510.24 169.559 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
510.24 179.48 mo
538.586 179.48 li
538.586 169.559 li
510.24 169.559 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
518.69 178.22 mo
(5)sh
524.412 178.22 mo
(5)sh
311.81 194.37 mo
340.156 194.37 li
340.156 184.449 li
311.81 184.449 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
311.81 194.37 mo
340.156 194.37 li
340.156 184.449 li
311.81 184.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: PBAAAA+VERDANA AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+VERDANA gcheck setglobal} if
1 3292 28 <00020071ffe3048f05ef0022003700a740340804190429043c253c2b352e
4c254c2b432e58045f175d18521b70017b250f111d324914294914061d02
0a0a0e4a060a35110923b8fff8b40b0b425523b8fffc400a0c0c42552321
00091a00b8fff4402f0f0f025500100c0c0255009e390f391f39022c080b
0b42552c040c0c42552c211a10090902551a040c0c02551a963810f62b2b
ed2b2b5d10e62b2b113910ed2b2b2f3939003ffd322f3f1239ed2fed1239
31305d011402070604232226273533161633321237060623222627262635
340033321617161207342627262623220615141617161633323637363604
8f595a5bfeeeb9345c240a1d6a41ddfb145da4615c954b5859012cd86cb8
45555cca40382f6c3f90a736402d6c424ea04601030342c3fec270727c0b
0cbf0f1b0109e9383024343dbc83e4011e434353fefba49bbc342d27b4a3
5f782d1f152a28152900>PBAAAA+VERDANA AddT42Char 
PBAAAA+VERDANA /CharStrings get begin
/nine 28 def
end
PBAAAA+VERDANA /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYV+VERDANA*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 198{/.notdef}rp]
MFKJYV+VERDANA nf
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
320.26 193.11 mo
(4)sh
325.982 193.11 mo
(9)sh
340.16 194.37 mo
368.506 194.37 li
368.506 184.449 li
340.16 184.449 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
340.16 194.37 mo
368.506 194.37 li
368.506 184.449 li
340.16 184.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
348.61 193.11 mo
(5)sh
354.332 193.11 mo
(4)sh
425.2 194.37 mo
453.546 194.37 li
453.546 184.449 li
425.2 184.449 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
425.2 194.37 mo
453.546 194.37 li
453.546 184.449 li
425.2 184.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
433.65 193.11 mo
(4)sh
439.372 193.11 mo
(4)sh
453.54 194.37 mo
481.886 194.37 li
481.886 184.449 li
453.54 184.449 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
453.54 194.37 mo
481.886 194.37 li
481.886 184.449 li
453.54 184.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
461.99 193.11 mo
(3)sh
467.712 193.11 mo
(1)sh
538.58 194.37 mo
566.926 194.37 li
566.926 184.449 li
538.58 184.449 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
538.58 194.37 mo
566.926 194.37 li
566.926 184.449 li
538.58 184.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
547.03 193.11 mo
(6)sh
552.752 193.11 mo
(6)sh
368.5 194.37 mo
396.846 194.37 li
396.846 184.449 li
368.5 184.449 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
368.5 194.37 mo
396.846 194.37 li
396.846 184.449 li
368.5 184.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
376.96 193.11 mo
(5)sh
382.682 193.11 mo
(0)sh
396.85 194.37 mo
425.196 194.37 li
425.196 184.449 li
396.85 184.449 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
396.85 194.37 mo
425.196 194.37 li
425.196 184.449 li
396.85 184.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
405.3 193.11 mo
(4)sh
411.022 193.11 mo
(4)sh
481.89 194.37 mo
510.236 194.37 li
510.236 184.449 li
481.89 184.449 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
481.89 194.37 mo
510.236 194.37 li
510.236 184.449 li
481.89 184.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
490.34 193.11 mo
(4)sh
496.062 193.11 mo
(9)sh
510.24 194.37 mo
538.586 194.37 li
538.586 184.449 li
510.24 184.449 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
510.24 194.37 mo
538.586 194.37 li
538.586 184.449 li
510.24 184.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
518.69 193.11 mo
(5)sh
524.412 193.11 mo
(3)sh
311.81 208.54 mo
340.156 208.54 li
340.156 198.619 li
311.81 198.619 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
311.81 208.54 mo
340.156 208.54 li
340.156 198.619 li
311.81 198.619 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
320.26 207.28 mo
(4)sh
325.982 207.28 mo
(9)sh
340.16 208.54 mo
368.506 208.54 li
368.506 198.619 li
340.16 198.619 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
340.16 208.54 mo
368.506 208.54 li
368.506 198.619 li
340.16 198.619 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
348.61 207.28 mo
(5)sh
354.332 207.28 mo
(5)sh
425.2 208.54 mo
453.546 208.54 li
453.546 198.619 li
425.2 198.619 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
425.2 208.54 mo
453.546 208.54 li
453.546 198.619 li
425.2 198.619 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
433.65 207.28 mo
(4)sh
439.372 207.28 mo
(5)sh
453.54 208.54 mo
481.886 208.54 li
481.886 198.619 li
453.54 198.619 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
453.54 208.54 mo
481.886 208.54 li
481.886 198.619 li
453.54 198.619 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
461.99 207.28 mo
(3)sh
467.712 207.28 mo
(0)sh
538.58 208.54 mo
566.926 208.54 li
566.926 198.619 li
538.58 198.619 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
538.58 208.54 mo
566.926 208.54 li
566.926 198.619 li
538.58 198.619 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
547.03 207.28 mo
(6)sh
552.752 207.28 mo
(7)sh
368.5 208.54 mo
396.846 208.54 li
396.846 198.619 li
368.5 198.619 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
368.5 208.54 mo
396.846 208.54 li
396.846 198.619 li
368.5 198.619 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
376.96 207.28 mo
(5)sh
382.682 207.28 mo
(5)sh
396.85 208.54 mo
425.196 208.54 li
425.196 198.619 li
396.85 198.619 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
396.85 208.54 mo
425.196 208.54 li
425.196 198.619 li
396.85 198.619 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
405.3 207.28 mo
(4)sh
411.022 207.28 mo
(8)sh
481.89 208.54 mo
510.236 208.54 li
510.236 198.619 li
481.89 198.619 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
481.89 208.54 mo
510.236 208.54 li
510.236 198.619 li
481.89 198.619 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
490.34 207.28 mo
(5)sh
496.062 207.28 mo
(2)sh
510.24 208.54 mo
538.586 208.54 li
538.586 198.619 li
510.24 198.619 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
510.24 208.54 mo
538.586 208.54 li
538.586 198.619 li
510.24 198.619 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
518.69 207.28 mo
(5)sh
524.412 207.28 mo
(5)sh
%ADOBeginSubsetFont: HIBBAA+VERDANA,Bold Initial
ct_T42Dict begin
-0.547 -0.301 1.707 1.07
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+VERDANA,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f3273dc7e87000000cc000000606376
74205621662d0000012c000001f26670676d7a45ee2400000320000005bf
676c7966292ca1fb000027e4000014fe68656164de746b8e000008e00000
00366868656111500a5a0000091800000024686d7478a69d0fc60000093c
0000082a6c6f63612aa2316a00001168000007706d617870062406360000
18d8000000206e616d654eeeb961000018f800000be070726570de7bddd1
000024d800000309676469720000000000000000000000000002048b02bc
00050008059a053300000125059a0533000003a000d303050800020b0804
030504040204a10006ff4000205b00000010000000004d53202000200020
00ad061efe5900ca080b01ae2000019f00000000046305d1000000200001
0614000a000005d1001f000005d1001f0000000000000000000000000000
0463002300000000ffe100000000ffdd00000000ffe10000fe64fff50000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000800000008000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000001d10229000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000018f0186018001540177016d0175016901400163
0159014001830175016f00ae0000000000a500e901200119010e01010123
0111010700fb0125011d01130104000a011101ec000000f400000000009d
0000000000f4013a00f302e100000000008b000000bf00d400e400ed00fe
010e00be00be0067006700aa00a100580058011e01270139014800ee010e
011c0000009a00b100b900be00c800d400db00e600f00108015a0176018a
0194020d0247025a010e011801430189024d02fb04240007017702120167
03ba01f401060115012400ba00cc00da03b0ffe801a000e0032d02b30078
004c00d30134014003a5032a031f02d102a50000403a5438373635343332
31302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161514
131211100f0e0d0c0b0a090807060504030201002c01b0184358b119072b
1b212121592d2c01b0184358b11a072b1b212121592d2c01b0184358b003
2510f221b000121b212121592d2c01b0184358b11b072b1b212121592d2c
01b0184358b11c072b1b212121592d2c01b0184358b11d072b1b21212159
2d2c01b0184358b11e072b1b212121592d2c4eb00014b046234344b00325
10b10046e6b00013b00114b00010f221b001134db000122d2c01b0184358
45646a234569b01943646060b0462344231020b046f02fb000121b212121
21592d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0462370
b101463e01b0462370b10246453ab10200080d2d2cb0122bb0022545b002
25456ab0408b60b0022523442121212d2cb0132bb0022545b00225456ab8
ffc08c60b0022523442121212d2cb000b0122b2121212d2cb000b0132b21
21212d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2cb100032545685458b0032545
b0032545606820b004252344b0042523441bb00325204568208a2344b003
25456860b003252344592d2cb00325204568208a2344b00325456860b003
2523442d2cb00943588721c01bb01243588745b0112bb0472344b0477ae4
1b038a45186920b04723448a8a8720b0a05158b0112bb0472344b0477ae4
1b21b0477ae4595959182d2c208a4523456860442d2c456a422d2c01182f
2d2c21212d2c01b0022545b002254564606ab00325456a6120b00425456a
208a8b65b0042523448cb00325234421212d2c01456823456961b0032545
6a6120b00425456a208a8b65b0042523448cb00325234421212d2c018a8a
45642345646164422d2c01b0022543b04054b0022543b000545a58b00325
2045b040614459b0022543b00054b0022543b040545a58b004252045b040
604459212121212d2c014b525843b00225452361441b2121592d2c014b52
5843b00225452360441b2121592d2c4b525845441b2121592d2c0120b003
252349b04060b0206320b000525823b002253823b002256538008a63381b
212121212159012d2c4b505845441b2121592d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c462346608a8a462320468a608a61b8ff8062232010238a
b14b4b8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a
2d2c2045b003254652583f1b2111592d2c2045b003254650583f1b211159
2d2c00b00743b006430b2d2c4b5258b00425b0042549b00425b004254961
20b0005458212043b0005558591bb04054582043b0005458591b2043b000
54581bb00325b8ffc03859595959212121212d2c4b52584365381b212159
2d2c4b525843381b2121592d2c21210c6423648bb84000622d2c21b08051
580c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c6423
648bb81555621bb200802f2b59b002602d2c0c6423648bb8400062602321
2d2cb4000100000015b00826b00826b00826b008260f10161345683ab001
162d2cb4000100000015b00826b00826b00826b008260f1016134568653a
b001162d2cb0134358031b02592d2cb0134358021b03592d2cb00a2b2310
203cb0172b2d2cb0282b8a102320d023b0102bb00558c01b3c59201011b0
0012012d2c4b53234b515a5820458a60441b2121592d2c4b53234b515a58
381b2121592d2c20b003254523452361688a204568208a234460442d2cb1
020042b123018851b1400188535a58b910000020885458b2020102436042
59b12401885158b920000040885458b202020243604259b12401885458b2
022002436042004b014b5258b2020802436042591bb940000080885458b2
02040243604259b94000008063b80100885458b202080243604259b94000
010063b80200885458b2021002436042595959592d0000010000000507ae
78b13cb75f0f3cf5001b080000000000ad6c53f800000000c891c4c4fb9a
fd930da8089300010009000200000000000000010000080bfe5200000e38
fb9afd710da800010000000000000000000000000000005e080001000000
000002bc000002bc0000033800cb04b300a7000000000000000000000000
0000000000000000000000000000000000000000000000000000000003d7
006e02e400b7000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000053400be00000000000000000000000000000000062b
00be00000000079500be06c600be000000000000000006cd0067064200be
05af006d0574002900000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000005580056
059800aa04b500580598005a05500058000000000598005a05b300aa02bc
00a00000000000000000000000000000000005b300aa00000000059800aa
0598005a03fa00aa04bf005f03a5002b05b300a10000000007d6002d0000
00000535001e000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000001f001f001f001f0049007a
007a007a007a007a007a007a007a007a007a007a009600b100b100b100b1
00b100b100b100b100b100b100b100b100b100b100b100b100b100b100b1
00b100b100b100b100b100e900e900e900e900e901980198021102870287
028703130386043704610461046104610461046104610461046104610461
0461046104e0053005b106050671067106eb072e075b075b075b075b075b
079d079d07f3084708850911096209a709a70a210a210a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f0a7f
0001000003b7003500020000000000020010004000550000020505bf0000
000000000046034e00010000000000000032000000010000000000010007
003200010000000000020004007f0001000000000003002f006d00010000
00000004000c00770001000000000005000c00840001000000000006000c
009c0001000000000007003b00320001000000000009000e00a800010000
0000000d014c00b6000100000000000e002a02020003000104030002000e
023c0003000104030004001e022c0003000104050002000a025a00030001
04050004001a024a00030001040600020006027400030001040600040016
026400030001040700020008028a00030001040700040018027a00030001
04080002000c02a800030001040800040022029200030001040900000064
02b40003000104090001000e03180003000104090002000803b200030001
04090003005e038e0003000104090004001803a200030001040900050018
03bc0003000104090006001803ec00030001040900070076031800030001
04090009001c0404000300010409000d02980420000300010409000e0054
06b800030001040a0002000e071c00030001040a0004001e070c00030001
040b00020012073a00030001040b00040022072a00030001040c00020008
075c00030001040c00040018074c00030001040e00020010077e00030001
040e00040020076e00030001041000020012075c00030001041000040022
074c00030001041300020006079e00030001041300040016078e00030001
04140002000e07b40003000104140004001e07a400030001041500020014
07d20003000104150004002407c20003000104160002000e07f600030001
04160004001e07e600030001041900020014081400030001041900040024
080400030001041b0002000a083800030001041b0004001a082800030001
041d00020006028a00030001041d00040016027a00030001041f0002000a
085200030001041f0004001a08420003000104240002000c086c00030001
04240004001c085c00030001042d0002000a088800030001042d0004001a
087800030001080a0002000e071c00030001080a0004001e070c00030001
08160002000e07f60003000108160004001e07e6000300010c0a0002000e
071c000300010c0a0004001e070c000300010c0c00020008075c00030001
0c0c00040018074ca92032303130204d6963726f736f667420436f72706f
726174696f6e2e20416c6c205269676874732052657365727665642e5665
7264616e6120697320612074726164656d61726b206f6620746865204d69
63726f736f66742067726f7570206f6620636f6d70616e6965732e4d6963
726f736f66743a56657264616e6120426f6c643a56657273696f6e20352e
303320284d6963726f736f66742956657264616e612d426f6c644d617474
68657720436172746572596f75206d617920757365207468697320666f6e
74206173207065726d6974746564206279207468652045554c4120666f72
207468652070726f6475637420696e207768696368207468697320666f6e
7420697320696e636c7564656420746f20646973706c617920616e642070
72696e7420636f6e74656e742e20596f75206d6179206f6e6c7920286929
20656d626564207468697320666f6e7420696e20636f6e74656e74206173
207065726d69747465642062792074686520656d62656464696e67207265
737472696374696f6e7320696e636c7564656420696e207468697320666f
6e743b20616e6420286969292074656d706f726172696c7920646f776e6c
6f6164207468697320666f6e7420746f2061207072696e746572206f7220
6f74686572206f75747075742064657669636520746f2068656c70207072
696e7420636f6e74656e742e687474703a2f2f7777772e6d6963726f736f
66742e636f6d2f7479706f6772617068792f666f6e74732f005600650072
00640061006e00610020004e006500670072006500740061005600650072
00640061006e0061002000740075010d006e00e900560065007200640061
006e0061002000660065006400560065007200640061006e006100200046
00650074007400560065007200640061006e006100310030003600200388
03bd03c403bf03bd03b100a9002000320030003100300020004d00690063
0072006f0073006f0066007400200043006f00720070006f007200610074
0069006f006e002e00200041006c006c0020005200690067006800740073
002000520065007300650072007600650064002e00560065007200640061
006e006100200069007300200061002000740072006100640065006d0061
0072006b0020006f006600200074006800650020004d006900630072006f
0073006f00660074002000670072006f007500700020006f006600200063
006f006d00700061006e006900650073002e004d006900630072006f0073
006f00660074003a00560065007200640061006e006100200042006f006c
0064003a00560065007200730069006f006e00200035002e003000330020
0028004d006900630072006f0073006f0066007400290056006500720064
0061006e0061002d0042006f006c0064004d006100740074006800650077
00200043006100720074006500720059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200061
00730020007000650072006d006900740074006500640020006200790020
007400680065002000450055004c004100200066006f0072002000740068
0065002000700072006f006400750063007400200069006e002000770068
0069006300680020007400680069007300200066006f006e007400200069
007300200069006e0063006c007500640065006400200074006f00200064
006900730070006c0061007900200061006e00640020007000720069006e
007400200063006f006e00740065006e0074002e00200059006f00750020
006d006100790020006f006e006c0079002000280069002900200065006d
0062006500640020007400680069007300200066006f006e007400200069
006e00200063006f006e00740065006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
0065006d00620065006400640069006e0067002000720065007300740072
0069006300740069006f006e007300200069006e0063006c007500640065
006400200069006e0020007400680069007300200066006f006e0074003b
00200061006e006400200028006900690029002000740065006d0070006f
0072006100720069006c007900200064006f0077006e006c006f00610064
0020007400680069007300200066006f006e007400200074006f00200061
0020007000720069006e0074006500720020006f00720020006f00740068
006500720020006f00750074007000750074002000640065007600690063
006500200074006f002000680065006c00700020007000720069006e0074
00200063006f006e00740065006e0074002e0068007400740070003a002f
002f007700770077002e006d006900630072006f0073006f00660074002e
0063006f006d002f007400790070006f006700720061007000680079002f
0066006f006e00740073002f00560065007200640061006e00610020004e
00650067007200690074006100560065007200640061006e00610020004c
0069006800610076006f00690074007500560065007200640061006e0061
002000470072006100730073006500740074006f00560065007200640061
006e00610020004600e9006c006b00f6007600e900720056006500720064
0061006e0061002000560065007400560065007200640061006e00610020
00480061006c007600660065007400560065007200640061006e00610020
0050006f00670072007500620069006f006e007900560065007200640061
006e00610020004e00650067007200690074006f00560065007200640061
006e00610020041f043e043b0443043604380440043d044b043900560065
007200640061006e0061002000540075010d006e00e90056006500720064
0061006e00610020004b0061006c0131006e00560065007200640061006e
00610020004b007200650070006b006f00560065007200640061006e0061
0020004c006f006400690061400954e8e7241fe7e6111fb8ffc04064d60c
103640d901d792111fcd92111fcc92111fcb92111fca92111fc992111fc1
92111fa99b241f9c9b241f9a9b201f999b281f9b921b1ff198151fa79819
1f97982a1f9698251f9598191f4098019892111f0ff2019492191f93922b
1f9192211f009201b8ffc0405c920b10360fbc1fbc2fbc032fbb0100b910
b9020fb80100b50120f87ff80210f720f740f7037ff50110f420f40220ee
50ee022fec3fec4fec0330d570d502b3b2281fb2b3111f2fb33fb360b070
b070d405e5e4241fe3e4241f2fe401b8ffc0b3c20c1036b8ffc040ffb40c
1036d27f2e1fd17f2e1fd07f201fcf7f111fc07f111fbf7f111f8fbeffbe
020fbd01ffbd01b1af111f70af0110a820a8028b89301f8a892f1f897f33
1f8884181f8784181f8684491f8584111f83843a1f847f201f6faaa0aab0
aaf0aa0440a101105c205c405c03f37f111f827f181f817f4a1f807f181f
7e7f2e1f7d7f2e1f507f607f707f03100f211f16152a1f0706211f19182a
1f0403211f13122a1f2c2d0f2a2b0e28290f26270e24250f22230e20210f
1e1f0e1b1c1d0d18191a0d1516170d1213140d0f10110c0c0d0e0c090a0b
0c0607080c0304050c0001020c100f800f02400680060240038003020f00
3f004f007f00040f002f003f00401d6f007f00bf00cf00ff00081b3b081f
0f3a081f0339081f0038081f503301b0124b004b5442b013014b004b5342
b0332b4bb8080052b0322b4bb009505b58b101018e59b0332bb00288b801
0054b00488b8020054b012435a5b58b80119b101018e851bb0124358b101
01b80180858d8d1bb10101b80180858d8d59592b1db0644b5358b0701d59
b0324b5358b0901d59002b2b2b2b73747373732b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2bb109322b4bb0645242b1e9044523456861
b0e92344b1eae94523456860b0ea234401732b2b2b2b2b2b7373732b2b2b
2b2b2b2b2b2b73732b7374732b2b2b2b2b2b2b2b732b2b732b2b73737373
7373737373737373002b752b2b2b732b742b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b732b2b2b2b00000000>
[5375 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> HIBBAA+VERDANA,Bold AddT42Char 
1 1294 52 <00020067fe57066605f000170034006b404a292d29312533742b7b2d7b31
7534071f1f1b944f2301231c182909920a2f1a2f2a2f032f041592052915
29252903291318804f290129202a293420042c037d32b8363f36010f7d2c
b73510f6ed5d10f6ed1217392f2f5ded003f5ded3f5ded12393f5dfd322f
31305d013e01353426272e01232206070e01151416171e01333236131e01
3332363733110e01232226272e0127240011100021200011100204693836
3e32338548498136323f3d3232864a4a865b0464792970162638838777b1
3b3a3a05feb2fe8b019801670166019af0016f44b97d86bc3a3c36343c38
c58285bb3b3b3839fedf63561c0bfef80d143b3635905813019901570167
01a1fe5ffe99fef7fe7f>HIBBAA+VERDANA,Bold AddT42Char 
1 1574 53 <000200be0000065805d1000e001f007940520c101a102c103d104d105c10
5519501a6c10661a7f100b1110810f1f0f331f431f731f031f1508933f11
4f117f1103111114079315030f14701f01700f01007d1c1f1c140f0f2120
2140210208127f14b52010f6fd325d11332f1239392fed5d5d002f333fed
12392f5ded12395d3130018710fdc0015d013426272e012b011133323637
3e0101210123112111213216171e011514060704012e382768458b765c7c
2a28250257fe2bfe6ab1fe82028484be535463998e04093850171007fe6f
12201f4bfc360222fdde05d11e32329f78a5d045>HIBBAA+VERDANA,Bold AddT42Char 
1 2242 68 <00020056ffe204b70483000f0030006640470f18052c19184905491c5905
591c6b05690f6b1c76257229702d0d01f11f1f2b1627400d0f37272723a7
2b100da71616301f0130842fba322f32010f281f28022828078419bb3110
f6ed332f5d5d10f6fd3232002f3fed3ffd322f2b1112392fed31305d0135
0e01070e01151416171e01333236170e01070e0123222635343637362437
3534262322060723113624332004151121035249aa2c36390c1817404436
6f2a1d5626357244a0d86e656401289f989459ca2c213901018101330111
fe9b0125ea06150e114135232c1414132c8a163e121817c69a7b9c2d2d26
09065d473f11010f0f29bdcafd04>HIBBAA+VERDANA,Bold AddT42Char 
1 2496 69 <000200aaffea053e06140010001d003840244501451d570f660f7f057f19
0614960e1009001b98031608118300bc1f06170b8408b91e10f6fd323210
f4ed002f3fed3f3fed31305d0110002322262707211121113e0133321201
342623220607111e01333236053efedbdb5e8e400ffea7016853ad71d5e6
fe8d6683336c312746318f8c0241fef7feb22826380614fdda4252fecdfe
eb96a21f1dfdcc0e0aa8>HIBBAA+VERDANA,Bold AddT42Char 
1 2656 70 <00010058ffe20471048200270088402330033f093b19311b400345044c08
4c094c19441b4b1f5b1f6b1f7c200e26200c103714b8ffd6b30d10370eb8
ffe040150c10371040091037301001101017970c103f240124b8ffc0401f
09103724241d97001610002410247f2403242f290124296029011a8306bb
2810f4ed5d11335d2f5d33003fed332f2b5d3fed332f5d2b31302b2b2b5d
052226272e01353436373e013332161711232e01272e0123220615141633
3236373e013733110e0102f393f35a5962695e5bee8073c25433153b2b29
6241909b9f92446d242234163355b91e464949de959de44b47423228fecd
123017161db79da2a81f15142c15fecd282f>HIBBAA+VERDANA,Bold AddT42Char 
1 3082 72 <00020058ffe204fc04860015001c006e405324022b0a33023c0a43024d05
4d0a430e4c105a055b0a551b69066b096014601774027909740e74141401
f11c1c0c19a712100008100853086308730805080804980c160909168400
bc1e2f1e011c01840fbb1d10f6fd325d10f4ed332f003fed332f5d3fed12
392fed31305d01211e013332363733110e0123200011100021200011252e
012322060704fcfcc808b9b472d63e287ad883feaefe9801550129011201
14fe9a036a7068860801ef848c522ffedf312c0130011901160145feebfe
fc5571726c77>HIBBAA+VERDANA,Bold AddT42Char 
1 3766 81 <000100aa000005120482001600384023011513153c1170150401100d0895
13100e0f0d018400ba183018601802100b840db91710f6fd325d10f6ed00
2f3f3fed12393931305d2121113426272626232206071121112115363633
3216150512fe960e11144d4531653bfe98016860b16cb6cd022d44872025
222023fce404637c4b50d4d3>HIBBAA+VERDANA,Bold AddT42Char 
1 4070 84 <0002005afe6404ee048200130020003b40274a0a4a1a4d205b206b207010
7a200718970e10120f1e960516011b1114028400ba221b8308bb2110f6ed
10f4fd3232003f3fed3f3fed31305d0121110e01232202113436373e0133
321617372101112e0123220615141633323604eefe9858a869cef5534844
c2615f81480d015dfe982654238e8e727e316efe64020a4746013c010c8f
dd4f4b532b2632fcd30227100eb19da59525>HIBBAA+VERDANA,Bold AddT42Char 
1 4238 85 <000100aa000003d8046700120038b7010c700c02000004b8ffc040170a10
3704950f0f0b0f09080000142f14010c078409b91310f6fd325d11332f00
3f3f3ffd2b322f31305d01232e012322060711211121153e013332161703
d8201766224d7644fe98016877b04a133012030c08081418fd100463a566
43020200>HIBBAA+VERDANA,Bold AddT42Char 
1 4362 86 <0001005fffe1047a0482003000824010322f4918472f7501790b791b7523
071fb8ffe040210e103705200e10373b110111001a28041d035021012140
091037212125a71d1007b8ffc0401309103707070ea703162128831a1183
211a0700b8ffc0400a090e37000032703201072f5d11332f2b123939ed2f
ed2f003fed332f2b3fed332f2b5d111217395d31302b2b5d011404212226
271133161617161633323635342627262627262635342421321617112326
26232206151416171616171616047afec8fef196f44a211b4741388e516a
663c5428893899940133010a7ee7411f50cd6957773664377f408e880164
aed538220128132d1a17212f2e29251109150f28a97ea2d7331dfee43745
302c282a150b1510259f>HIBBAA+VERDANA,Bold AddT42Char 
1 4804 88 <000100a1ffe1050904630016003e40290a061a064c135b136c137f077a13
07021505090f119505160114028400ba1830186018020b8408b91710f6ed
5d10f6fd32002f3fed3f12393931305d2901350e01232226351121111416
171e013332363711210509fe9864a673bac9016a0b14134d452e70340168
7c4c4fd6d102dbfdd355712525222221031c>HIBBAA+VERDANA,Bold AddT42Char 
1 4942 90 <0001002d000007a90463000c00b240710902060419021604290226043901
3f0230043b09330a49014f0240044b09430a5b0255045c09530a6c026404
6c09610a7d0270047d09720a1c020b860c010c8700010004080407140702
f40701078606050651015e0565016a0571017f05067508730b0203050809
0b0c0602060f020800b8ffdf4019091037062109103700000e0006100610
0e200e400e600e06062f5d11332f2b2b003f3f1217395d3130015d8710fd
5d71c0c08710fd71c0c0015d0901210b012101211b01211b0107a9fea4fe
82e5e1fe7dfea7017ac0f0013fe4bd0463fb9d02f5fd0b0463fcfa0306fc
fa030600>HIBBAA+VERDANA,Bold AddT42Char 
1 5186 92 <0001001efe64051704630007008d403f08054a0558035905660305000700
05060504ab01b90102018702030200a407b6070207860605060b03070518
0325032b0538036a057b0275037a0574060b02b8ffdf4023090f37062109
0f370200053506450602060f05041b0202092f094f09020006100602062f
5d5d11332f003f2f3f5d1239393130012b2b5d8710fd5dc08710fd5dc008
c008c0015d090121012113012102a501000172fd90fe7ab2fe4b017a018d
02d6fa0101a4045b>HIBBAA+VERDANA,Bold AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>HIBBAA+VERDANA,Bold AddT42Char 
HIBBAA+VERDANA,Bold /CharStrings get begin
/space 3 def
/Q 52 def
/R 53 def
/a 68 def
/b 69 def
/c 70 def
/e 72 def
/n 81 def
/q 84 def
/r 85 def
/s 86 def
/u 88 def
/w 90 def
/y 92 def
end
HIBBAA+VERDANA,Bold /Encoding get
dup 32 /space put
dup 81 /Q put
dup 82 /R put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 110 /n put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 117 /u put
dup 119 /w put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/MFKJYW+VERDANA,Bold /HIBBAA+VERDANA,Bold findfont ct_VMDictPut
/MFKJYW+VERDANA,Bold*1 
[32{/.notdef}rp /space 48{/.notdef}rp /Q /R 14{/.notdef}rp /a /b 
/c /.notdef /e 8{/.notdef}rp /n 2{/.notdef}rp /q /r 
/s /.notdef /u /.notdef /w /.notdef /y 134{/.notdef}rp]
MFKJYW+VERDANA,Bold nf
MFKJYW+VERDANA,Bold*1 [7.99992 0 0 -7.99992 0 0 ]msf
320.3 136.31 mo
(R)sh
326.558 136.31 mo
(a)sh
331.902 136.31 mo
(w)sh
339.737 136.31 mo
( )sh
342.472 136.31 mo
(s)sh
347.218 136.31 mo
(e)sh
352.53 136.31 mo
(q)sh
358.124 136.31 mo
(u)sh
363.823 136.31 mo
(e)sh
369.136 136.31 mo
(n)sh
374.835 136.31 mo
(c)sh
379.542 136.31 mo
(e)sh
384.854 136.31 mo
(s)sh
608.98 36.3103 mo
(Q)sh
615.781 36.3103 mo
(u)sh
621.48 36.3103 mo
(e)sh
626.792 36.3103 mo
(r)sh
630.769 36.3103 mo
(y)sh
635.976 36.3103 mo
( )sh
638.71 36.3103 mo
(s)sh
643.456 36.3103 mo
(u)sh
649.156 36.3103 mo
(b)sh
654.749 36.3103 mo
(s)sh
659.495 36.3103 mo
(e)sh
664.808 36.3103 mo
(q)sh
670.402 36.3103 mo
(u)sh
676.101 36.3103 mo
(e)sh
681.413 36.3103 mo
(n)sh
687.112 36.3103 mo
(c)sh
691.819 36.3103 mo
(e)sh
697.132 36.3103 mo
(s)sh
609.45 51.1403 mo
637.796 51.1403 li
637.796 41.219 li
609.45 41.219 li
cp
.00604257 .167544 .248875 0 cmyk
ef
609.45 51.1403 mo
637.796 51.1403 li
637.796 41.219 li
609.45 41.219 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
620.76 49.8803 mo
(3)sh
637.8 51.1403 mo
666.146 51.1403 li
666.146 41.219 li
637.8 41.219 li
cp
.00604257 .167544 .248875 0 cmyk
ef
637.8 51.1403 mo
666.146 51.1403 li
666.146 41.219 li
637.8 41.219 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
649.11 49.8803 mo
(4)sh
666.14 51.1403 mo
694.486 51.1403 li
694.486 41.219 li
666.14 41.219 li
cp
.00604257 .167544 .248875 0 cmyk
ef
666.14 51.1403 mo
694.486 51.1403 li
694.486 41.219 li
666.14 41.219 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
677.45 49.8803 mo
(1)sh
609.45 51.1403 mo
637.796 51.1403 li
637.796 41.219 li
609.45 41.219 li
cp
.00604257 .167544 .248875 0 cmyk
ef
609.45 51.1403 mo
637.796 51.1403 li
637.796 41.219 li
609.45 41.219 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
617.9 49.8803 mo
(5)sh
623.622 49.8803 mo
(1)sh
637.8 51.1403 mo
666.146 51.1403 li
666.146 41.219 li
637.8 41.219 li
cp
.00604257 .167544 .248875 0 cmyk
ef
637.8 51.1403 mo
666.146 51.1403 li
666.146 41.219 li
637.8 41.219 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
646.25 49.8803 mo
(5)sh
651.972 49.8803 mo
(3)sh
666.14 51.1403 mo
694.486 51.1403 li
694.486 41.219 li
666.14 41.219 li
cp
.00604257 .167544 .248875 0 cmyk
ef
666.14 51.1403 mo
694.486 51.1403 li
694.486 41.219 li
666.14 41.219 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
674.59 49.8803 mo
(5)sh
680.312 49.8803 mo
(4)sh
637.8 65.3103 mo
666.146 65.3103 li
666.146 55.389 li
637.8 55.389 li
cp
.00604257 .167544 .248875 0 cmyk
ef
637.8 65.3103 mo
666.146 65.3103 li
666.146 55.389 li
637.8 55.389 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
649.11 64.0503 mo
(3)sh
666.14 65.3103 mo
694.486 65.3103 li
694.486 55.389 li
666.14 55.389 li
cp
.00604257 .167544 .248875 0 cmyk
ef
666.14 65.3103 mo
694.486 65.3103 li
694.486 55.389 li
666.14 55.389 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
677.45 64.0503 mo
(4)sh
609.45 65.3103 mo
637.796 65.3103 li
637.796 55.389 li
609.45 55.389 li
cp
.00604257 .167544 .248875 0 cmyk
ef
609.45 65.3103 mo
637.796 65.3103 li
637.796 55.389 li
609.45 55.389 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
620.76 64.0503 mo
(2)sh
637.8 65.3103 mo
666.146 65.3103 li
666.146 55.389 li
637.8 55.389 li
cp
.00604257 .167544 .248875 0 cmyk
ef
637.8 65.3103 mo
666.146 65.3103 li
666.146 55.389 li
637.8 55.389 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
646.25 64.0503 mo
(4)sh
651.972 64.0503 mo
(4)sh
666.14 65.3103 mo
694.486 65.3103 li
694.486 55.389 li
666.14 55.389 li
cp
.00604257 .167544 .248875 0 cmyk
ef
666.14 65.3103 mo
694.486 65.3103 li
694.486 55.389 li
666.14 55.389 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
674.59 64.0503 mo
(3)sh
680.312 64.0503 mo
(4)sh
609.45 65.3103 mo
637.796 65.3103 li
637.796 55.389 li
609.45 55.389 li
cp
.00604257 .167544 .248875 0 cmyk
ef
609.45 65.3103 mo
637.796 65.3103 li
637.796 55.389 li
609.45 55.389 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
617.9 64.0503 mo
(4)sh
623.622 64.0503 mo
(2)sh
666.14 79.4803 mo
694.486 79.4803 li
694.486 69.5591 li
666.14 69.5591 li
cp
.00604257 .167544 .248875 0 cmyk
ef
666.14 79.4803 mo
694.486 79.4803 li
694.486 69.5591 li
666.14 69.5591 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
677.45 78.2203 mo
(3)sh
609.45 79.4803 mo
637.796 79.4803 li
637.796 69.5591 li
609.45 69.5591 li
cp
.00604257 .167544 .248875 0 cmyk
ef
609.45 79.4803 mo
637.796 79.4803 li
637.796 69.5591 li
609.45 69.5591 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
620.76 78.2203 mo
(1)sh
637.8 79.4803 mo
666.146 79.4803 li
666.146 69.5591 li
637.8 69.5591 li
cp
.00604257 .167544 .248875 0 cmyk
ef
637.8 79.4803 mo
666.146 79.4803 li
666.146 69.5591 li
637.8 69.5591 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
649.11 78.2203 mo
(2)sh
666.14 79.4803 mo
694.486 79.4803 li
694.486 69.5591 li
666.14 69.5591 li
cp
.00604257 .167544 .248875 0 cmyk
ef
666.14 79.4803 mo
694.486 79.4803 li
694.486 69.5591 li
666.14 69.5591 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
674.59 78.2203 mo
(6)sh
680.312 78.2203 mo
(5)sh
609.45 79.4803 mo
637.796 79.4803 li
637.796 69.5591 li
609.45 69.5591 li
cp
.00604257 .167544 .248875 0 cmyk
ef
609.45 79.4803 mo
637.796 79.4803 li
637.796 69.5591 li
609.45 69.5591 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
617.9 78.2203 mo
(5)sh
623.622 78.2203 mo
(5)sh
637.8 79.4803 mo
666.146 79.4803 li
666.146 69.5591 li
637.8 69.5591 li
cp
.00604257 .167544 .248875 0 cmyk
ef
637.8 79.4803 mo
666.146 79.4803 li
666.146 69.5591 li
637.8 69.5591 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
646.25 78.2203 mo
(5)sh
651.972 78.2203 mo
(7)sh
%ADOBeginSubsetFont: HIBBAA+VERDANA,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+VERDANA,Bold gcheck setglobal} if
1 2158 55 <000100290000054b05d10007002c401a010491060303005b017f055b7f04
0104040908100940097f09035d1112392f5de4fde4002f3ffd3231300121
112111211121054bfe2ffe80fe2f052204b1fb4f04b10120>HIBBAA+VERDANA,Bold AddT42Char 
1 3298 74 <0002005afe5904ee048200260033005540384e164e2d4e335d165d336916
6a337d087a0c75237a330b1524182b972110260f3196180a0a0e97061c09
091b2427158400ba352e831bbb3410f6ed10f4fd323212392f003ffd322f
2fed3f3fed12393931305d251406070e012322262711331e01333236373e
013d010e01232200113436373e0133321617372101112e01232206151416
33323604ee5a5151e59075e3532c42be4b647d211f1c419e61ecff004e47
42c1655b953d0d015dfe981f5a248e8e79773668819ed83d3e371c140119
1a2b252220644615353e011c01228bca4b464e2b2632fcff01fd0d0fa392
a2802200>HIBBAA+VERDANA,Bold AddT42Char 
1 3676 76 <000200a00000021c06140003000700314021059e00061006200603060002
0f01049d0084059d000110010201500960097009035d2f5de4fde4002f3f
3f5ded313029011121372111210212fe9801680afe84017c0463a0011100
>HIBBAA+VERDANA,Bold AddT42Char 
HIBBAA+VERDANA,Bold /CharStrings get begin
/T 55 def
/g 74 def
/i 76 def
end
HIBBAA+VERDANA,Bold /Encoding get
dup 84 /T put
dup 103 /g put
dup 105 /i put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYW+VERDANA,Bold*1 
[32{/.notdef}rp /space 48{/.notdef}rp /Q /R /.notdef /T 12{/.notdef}rp 
/a /b /c /.notdef /e /.notdef /g /.notdef 
/i 4{/.notdef}rp /n 2{/.notdef}rp /q /r /s /.notdef 
/u /.notdef /w /.notdef /y 134{/.notdef}rp]
MFKJYW+VERDANA,Bold nf
MFKJYW+VERDANA,Bold*1 [7.99992 0 0 -7.99992 0 0 ]msf
608.9 106.55 mo
(T)sh
614.353 106.55 mo
(r)sh
618.33 106.55 mo
(a)sh
623.673 106.55 mo
(i)sh
626.408 106.55 mo
(n)sh
632.107 106.55 mo
(i)sh
634.841 106.55 mo
(n)sh
640.541 106.55 mo
(g)sh
646.134 106.55 mo
( )sh
648.869 106.55 mo
(s)sh
653.615 106.55 mo
(u)sh
659.314 106.55 mo
(b)sh
664.908 106.55 mo
(s)sh
669.654 106.55 mo
(e)sh
674.966 106.55 mo
(q)sh
680.56 106.55 mo
(u)sh
686.259 106.55 mo
(e)sh
691.572 106.55 mo
(n)sh
697.271 106.55 mo
(c)sh
701.978 106.55 mo
(e)sh
707.29 106.55 mo
(s)sh
609.45 122.17 mo
637.796 122.17 li
637.796 112.249 li
609.45 112.249 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 122.17 mo
637.796 122.17 li
637.796 112.249 li
609.45 112.249 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
620.76 120.91 mo
(3)sh
637.8 122.17 mo
666.146 122.17 li
666.146 112.249 li
637.8 112.249 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 122.17 mo
666.146 122.17 li
666.146 112.249 li
637.8 112.249 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
649.11 120.91 mo
(4)sh
666.14 122.17 mo
694.486 122.17 li
694.486 112.249 li
666.14 112.249 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 122.17 mo
694.486 122.17 li
694.486 112.249 li
666.14 112.249 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
677.45 120.91 mo
(1)sh
609.45 122.17 mo
637.796 122.17 li
637.796 112.249 li
609.45 112.249 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 122.17 mo
637.796 122.17 li
637.796 112.249 li
609.45 112.249 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
617.9 120.91 mo
(5)sh
623.622 120.91 mo
(0)sh
637.8 122.17 mo
666.146 122.17 li
666.146 112.249 li
637.8 112.249 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 122.17 mo
666.146 122.17 li
666.146 112.249 li
637.8 112.249 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
646.25 120.91 mo
(5)sh
651.972 120.91 mo
(3)sh
666.14 122.17 mo
694.486 122.17 li
694.486 112.249 li
666.14 112.249 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 122.17 mo
694.486 122.17 li
694.486 112.249 li
666.14 112.249 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
674.59 120.91 mo
(5)sh
680.312 120.91 mo
(2)sh
609.45 136.34 mo
637.796 136.34 li
637.796 126.419 li
609.45 126.419 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 136.34 mo
637.796 136.34 li
637.796 126.419 li
609.45 126.419 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
620.76 135.08 mo
(4)sh
637.8 136.34 mo
666.146 136.34 li
666.146 126.419 li
637.8 126.419 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 136.34 mo
666.146 136.34 li
666.146 126.419 li
637.8 126.419 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
649.11 135.08 mo
(1)sh
666.14 136.34 mo
694.486 136.34 li
694.486 126.419 li
666.14 126.419 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 136.34 mo
694.486 136.34 li
694.486 126.419 li
666.14 126.419 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
677.45 135.08 mo
(2)sh
609.45 136.34 mo
637.796 136.34 li
637.796 126.419 li
609.45 126.419 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 136.34 mo
637.796 136.34 li
637.796 126.419 li
609.45 126.419 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
617.9 135.08 mo
(5)sh
623.622 135.08 mo
(3)sh
637.8 136.34 mo
666.146 136.34 li
666.146 126.419 li
637.8 126.419 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 136.34 mo
666.146 136.34 li
666.146 126.419 li
637.8 126.419 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
646.25 135.08 mo
(5)sh
651.972 135.08 mo
(2)sh
666.14 136.34 mo
694.486 136.34 li
694.486 126.419 li
666.14 126.419 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 136.34 mo
694.486 136.34 li
694.486 126.419 li
666.14 126.419 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
674.59 135.08 mo
(4)sh
680.312 135.08 mo
(7)sh
666.14 150.51 mo
694.486 150.51 li
694.486 140.589 li
666.14 140.589 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 150.51 mo
694.486 150.51 li
694.486 140.589 li
666.14 140.589 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
677.45 149.25 mo
(3)sh
609.45 150.51 mo
637.796 150.51 li
637.796 140.589 li
609.45 140.589 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 150.51 mo
637.796 150.51 li
637.796 140.589 li
609.45 140.589 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
620.76 149.25 mo
(1)sh
637.8 150.51 mo
666.146 150.51 li
666.146 140.589 li
637.8 140.589 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 150.51 mo
666.146 150.51 li
666.146 140.589 li
637.8 140.589 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
649.11 149.25 mo
(2)sh
666.14 150.51 mo
694.486 150.51 li
694.486 140.589 li
666.14 140.589 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 150.51 mo
694.486 150.51 li
694.486 140.589 li
666.14 140.589 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
674.59 149.25 mo
(4)sh
680.312 149.25 mo
(2)sh
609.45 150.51 mo
637.796 150.51 li
637.796 140.589 li
609.45 140.589 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 150.51 mo
637.796 150.51 li
637.796 140.589 li
609.45 140.589 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
617.9 149.25 mo
(5)sh
623.622 149.25 mo
(2)sh
637.8 150.51 mo
666.146 150.51 li
666.146 140.589 li
637.8 140.589 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 150.51 mo
666.146 150.51 li
666.146 140.589 li
637.8 140.589 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
646.25 149.25 mo
(4)sh
651.972 149.25 mo
(7)sh
609.45 178.86 mo
637.796 178.86 li
637.796 168.939 li
609.45 168.939 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 178.86 mo
637.796 178.86 li
637.796 168.939 li
609.45 168.939 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
617.9 177.6 mo
(5)sh
623.622 177.6 mo
(0)sh
637.8 178.86 mo
666.146 178.86 li
666.146 168.939 li
637.8 168.939 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 178.86 mo
666.146 178.86 li
666.146 168.939 li
637.8 168.939 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
646.25 177.6 mo
(5)sh
651.972 177.6 mo
(5)sh
666.14 178.86 mo
694.486 178.86 li
694.486 168.939 li
666.14 168.939 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 178.86 mo
694.486 178.86 li
694.486 168.939 li
666.14 168.939 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
674.59 177.6 mo
(5)sh
680.312 177.6 mo
(1)sh
609.45 193.03 mo
637.796 193.03 li
637.796 183.109 li
609.45 183.109 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 193.03 mo
637.796 193.03 li
637.796 183.109 li
609.45 183.109 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
617.9 191.77 mo
(5)sh
623.622 191.77 mo
(5)sh
637.8 193.03 mo
666.146 193.03 li
666.146 183.109 li
637.8 183.109 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 193.03 mo
666.146 193.03 li
666.146 183.109 li
637.8 183.109 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
646.25 191.77 mo
(5)sh
651.972 191.77 mo
(1)sh
666.14 193.03 mo
694.486 193.03 li
694.486 183.109 li
666.14 183.109 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 193.03 mo
694.486 193.03 li
694.486 183.109 li
666.14 183.109 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
674.59 191.77 mo
(4)sh
680.312 191.77 mo
(3)sh
666.14 207.21 mo
694.486 207.21 li
694.486 197.289 li
666.14 197.289 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 207.21 mo
694.486 207.21 li
694.486 197.289 li
666.14 197.289 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
674.59 205.95 mo
(4)sh
680.312 205.95 mo
(3)sh
609.45 207.21 mo
637.796 207.21 li
637.796 197.289 li
609.45 197.289 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 207.21 mo
637.796 207.21 li
637.796 197.289 li
609.45 197.289 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
617.9 205.95 mo
(5)sh
623.622 205.95 mo
(1)sh
637.8 207.21 mo
666.146 207.21 li
666.146 197.289 li
637.8 197.289 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 207.21 mo
666.146 207.21 li
666.146 197.289 li
637.8 197.289 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
646.25 205.95 mo
(4)sh
651.972 205.95 mo
(3)sh
%ADOBeginSubsetFont: HIBBAA+VERDANA,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+VERDANA,Bold gcheck setglobal} if
1 300 17 <000100b70000022d01890003001b401102d90100d000014f015f016f017f
0105012f5ded002fed313029011121022dfe8a0176018900>HIBBAA+VERDANA,Bold AddT42Char 
HIBBAA+VERDANA,Bold /CharStrings get begin
/period 17 def
end
HIBBAA+VERDANA,Bold /Encoding get
dup 46 /period put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYW+VERDANA,Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period 34{/.notdef}rp /Q /R /.notdef 
/T 12{/.notdef}rp /a /b /c /.notdef /e /.notdef 
/g /.notdef /i 4{/.notdef}rp /n 2{/.notdef}rp /q /r 
/s /.notdef /u /.notdef /w /.notdef /y 134{/.notdef}rp]
MFKJYW+VERDANA,Bold nf
MFKJYW+VERDANA,Bold*1 [7.99992 0 0 -7.99992 0 0 ]msf
647.63 159.78 mo
(.)sh
650.521 159.78 mo
(.)sh
653.411 159.78 mo
(.)sh
647.63 214.35 mo
(.)sh
650.521 214.35 mo
(.)sh
653.411 214.35 mo
(.)sh
609.45 235.55 mo
637.796 235.55 li
637.796 225.629 li
609.45 225.629 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 235.55 mo
637.796 235.55 li
637.796 225.629 li
609.45 225.629 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: QJJAAA+VERDANA,Italic Initial
ct_T42Dict begin
-0.453 -0.301 1.461 1.051
 256 array 0 1 255 {1 index exch /.notdef put} for  /QJJAAA+VERDANA,Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f3272537bd1000000cc000000606376
74203d464c130000012c000001e66670676d9ab6568600000314000005eb
676c7966eebc59e1000027fc00000c4068656164dd93d3dd000009000000
003668686561102108c40000093800000024686d74784c4606f30000095c
0000081c6c6f6361f5a0f84000001178000007706d6178700641066c0000
18e8000000206e616d65eaf8ab540000190800000bbc707265701af18969
000024c40000033667646972000000000000000000000000000204110190
00050008059a0533002c0125059a0533004c03a0007802a70800020b0604
0305040b0204a10006ff4000205b00000010000000004d53202000010021
0072061efe5900ca080b01ae2000019f00000000045d05d1000000200001
0614000a000005d1001f000005d1001f0000000000000000000000000000
045d001f00000000ffe100000000ffe100000000ffe10000fe64fff50000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000800000008000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000001d10229000000000000000000000000000001670000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000d100c600c100b400c100b400c300bc00b700b7
00ae009e00d100c700bd00b400bd00b4007000c800a800a3009e009100ac
00a2009d009600a6009e00910084010200c3000000af0090000000000000
0000000000000089000002e1007300000056006d00740081008c0093009f
00a60047000000860031003800790059005900aa00b800d100f600a0009c
00880078006f00800087008e009900a000b500d300e9011300fd01120133
013c021c0244029f011d022f028f037300a300b2009d00af025f022101a2
01fd0087009400a200b400760080008c03b000270090009b02b002ff0091
009b004c00940000403c543a393837363534333231302f2e2d2c2b2a2928
27262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a
090807060504030201002c01b0184358b119072b1b212121592d2c01b018
4358b11a072b1b212121592d2c01b0184358b0032510f221b000121b2121
21592d2c01b0184358b11b072b1b212121592d2c01b0184358b11c072b1b
212121592d2c01b0184358b11d072b1b212121592d2c01b0184358b11e07
2b1b212121592d2c4eb00014b046234344b0032510b10046e6b00013b001
14b00010f221b001134db000122d2c01b018435845646a234569b0194364
6060b0462344231020b046f02fb000121b21212121592d2c01b10b0a4323
43650a2d2c00b10a0b4323430b2d2c00b0462370b101463e01b0462370b1
0246453ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225
23442121212d2cb0132bb0022545b00225456ab8ffc08c60b00225234421
21212d2cb000b0122b2121212d2cb000b0132b2121212d2c01b00643b007
43650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64236461
5c58b00361592d2cb100032545685458b0032545b0032545606820b00425
2344b0042523441bb00325204568208a2344b00325456860b00325234459
2d2cb00325204568208a2344b00325456860b0032523442d2cb009435887
21c01bb01243588745b0112bb0472344b0477ae41b038a45186920b04723
448a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae459595918
2d2c208a4523456860442d2c456a422d2c01182f2d2c21212d2c01b00225
45b002254564606ab00325456a6120b00425456a208a8b65b0042523448c
b00325234421212d2c01456823456961b00325456a6120b00425456a208a
8b65b0042523448cb00325234421212d2c018a8a45642345646164422d2c
01b0022543b04054b0022543b000545a58b003252045b040614459b00225
43b00054b0022543b040545a58b004252045b040604459212121212d2c01
4b525843b00225452361441b2121592d2c014b525843b00225452360441b
2121592d2c4b525845441b2121592d2c0120b003252349b04060b0206320
b000525823b002253823b002256538008a63381b212121212159012d2c4b
505845441b2121592d2c01b005251023208af500b0016023edec2d2c01b0
05251023208af500b0016123edec2d2c01b0062510f500edec2d2c462346
608a8a462320468a608a61b8ff8062232010238ab14b4b8a70456020b000
5058b00161b8ffba8b1bb0468c59b0106068013a2d2c2045b00325465258
3f1b2111592d2c2045b003254650583f1b2111592d2c00b00743b006430b
2d2c4b5258b00425b0042549b00425b00425496120b0005458212043b000
5558591bb04054582043b0005458591b2043b00054581bb00325b8ffc038
59595959212121212d2c4b52584365381b2121592d2c4b525843381b2121
592d2c21210c6423648bb84000622d2c21b08051580c6423648bb8200062
1bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb20080
2f2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b0
0826b00826b00826b008260f10161345683ab001162d2cb4000100000015
b00826b00826b00826b008260f1016134568653ab001162d2cb013435803
1b02592d2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb0282b
8a102320d023b0102bb00558c01b3c59201011b00012012d2c4b53234b51
5a5820458a60441b2121592d2c4b53234b515a58381b2121592d2c20b003
254523452361688a204568208a234460442d2c0120b0016020b040434823
2f003c012d2c2020b0016046b04023422fb0016020b064e000b003e0012d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b202020243604259b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b2021002436042595959592d00000100000005
07ae37f22ad85f0f3cf5001b080000000000adbcbc6e00000000c891c4c8
fc60fd930bb0086800020009000200000000000000010000080bfe520000
0c26fc60fde80bb0000d0003000000000000000000000000005708000100
0000000002d0000000000000032600ac03ac013100000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000051600850516009b051600220516003a0516
00300516005a00000000000000000516005b0516009e0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000006be0046000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000004fc00550000000002d000440000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000036a00380000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000001f001f001f001f005300800080008000800080008000800080
00800080008000800080008000e4013501b3023f02a8031f031f031f03da
046604660466046604660466046604660466046604660466046604660466
0466046604660466046604dd04dd04dd04dd04dd04dd04dd04dd04dd04dd
04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd055b055b
05c705c705c705c705c705c705c705c705c705c705c705c7062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200620062006200620062006200620
062006200620062006200620062006200001000003b7003e000300000000
00020010004100550000022105eb0000000000000046034e000100000000
00000032000000010000000000010007003200010000000000020006007f
00010000000000030031006d0001000000000004000e0077000100000000
0005000c00860001000000000006000e009e0001000000000007003b0032
0001000000000009000e00ac000100000000000d014c00ba000100000000
000e002a02060003000104030002000e02400003000104030004001e0230
0003000104050002000e025e0003000104050004001e024e000300010406
0002000c027c0003000104060004001c026c0003000104070002000c0298
0003000104070004001c02880003000104080002000c02c2000300010408
0004002202ac0003000104090000006402ce0003000104090001000e0332
0003000104090002000c03cc0003000104090003006203a8000300010409
0004001c03bc0003000104090005001803da0003000104090006001c040a
0003000104090007007603320003000104090009001c0426000300010409
000d02980442000300010409000e005406da00030001040a0002000e0240
00030001040a0004001e023000030001040b00020014029800030001040b
00040024028800030001040c00020010073e00030001040c00040020072e
00030001040e00020008075e00030001040e00040018074e000300010410
0002000e07760003000104100004001e07660003000104130002000e0794
0003000104130004001e07840003000104140002000c0298000300010414
0004001c02880003000104150002000e07b20003000104150004001e07a2
0003000104160002000e07d00003000104160004001e07c0000300010419
0002000c07ee0003000104190004001c07de00030001041b0002000e080a
00030001041b0004001e07fa00030001041d0002000c029800030001041d
0004001c028800030001041f0002000c082800030001041f0004001c0818
0003000104240002000e08440003000104240004001e083400030001042d
0002000c086200030001042d0004001c085200030001080a0002000e0240
00030001080a0004001e02300003000108160002000e07d0000300010816
0004001e07c0000300010c0a0002000e0240000300010c0a0004001e0230
000300010c0c00020010073e000300010c0c00040020072ea92032303130
204d6963726f736f667420436f72706f726174696f6e2e20416c6c205269
676874732052657365727665642e56657264616e61206973206120747261
64656d61726b206f6620746865204d6963726f736f66742067726f757020
6f6620636f6d70616e6965732e4d6963726f736f66743a56657264616e61
204974616c69633a56657273696f6e20352e303320284d6963726f736f66
742956657264616e612d4974616c69634d61747468657720436172746572
596f75206d617920757365207468697320666f6e74206173207065726d69
74746564206279207468652045554c4120666f72207468652070726f6475
637420696e207768696368207468697320666f6e7420697320696e636c75
64656420746f20646973706c617920616e64207072696e7420636f6e7465
6e742e20596f75206d6179206f6e6c792028692920656d62656420746869
7320666f6e7420696e20636f6e74656e74206173207065726d6974746564
2062792074686520656d62656464696e67207265737472696374696f6e73
20696e636c7564656420696e207468697320666f6e743b20616e64202869
69292074656d706f726172696c7920646f776e6c6f616420746869732066
6f6e7420746f2061207072696e746572206f72206f74686572206f757470
75742064657669636520746f2068656c70207072696e7420636f6e74656e
742e687474703a2f2f7777772e6d6963726f736f66742e636f6d2f747970
6f6772617068792f666f6e74732f00560065007200640061006e00610020
004300750072007300690076006100560065007200640061006e00610020
006b00750072007a00ed0076006100560065007200640061006e00610020
006b0075007200730069007600560065007200640061006e00610020004b
00750072007300690076006f00690074007500560065007200640061006e
0061003100300036002003a003bb03ac03b303b903b100a9002000320030
003100300020004d006900630072006f0073006f0066007400200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e00560065007200640061006e00610020006900730020006100200074
0072006100640065006d00610072006b0020006f00660020007400680065
0020004d006900630072006f0073006f00660074002000670072006f0075
00700020006f006600200063006f006d00700061006e006900650073002e
004d006900630072006f0073006f00660074003a00560065007200640061
006e00610020004900740061006c00690063003a00560065007200730069
006f006e00200035002e0030003300200028004d006900630072006f0073
006f00660074002900560065007200640061006e0061002d004900740061
006c00690063004d00610074007400680065007700200043006100720074
006500720059006f00750020006d00610079002000750073006500200074
00680069007300200066006f006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200045
0055004c004100200066006f00720020007400680065002000700072006f
006400750063007400200069006e00200077006800690063006800200074
00680069007300200066006f006e007400200069007300200069006e0063
006c007500640065006400200074006f00200064006900730070006c0061
007900200061006e00640020007000720069006e007400200063006f006e
00740065006e0074002e00200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002e0068007400740070003a002f002f007700770077002e
006d006900630072006f0073006f00660074002e0063006f006d002f0074
00790070006f006700720061007000680079002f0066006f006e00740073
002f00560065007200640061006e00610020004900740061006c00690071
0075006500560065007200640061006e0061002000440151006c00740056
0065007200640061006e006100200043006f0072007300690076006f0056
0065007200640061006e0061002000430075007200730069006500660056
0065007200640061006e00610020004b0075007200730079007700610056
0065007200640061006e006100200049007400e1006c00690063006f0056
0065007200640061006e00610020041a0443044004410438043200560065
007200640061006e00610020004b00750072007a00ed0076006100560065
007200640061006e00610020013000740061006c0069006b005600650072
00640061006e006100200050006f016100650076006e006f005600650072
00640061006e0061002000450074007a0061006e0061400954e8e7191fe6
e71a1fb8ffc04083c7171936e2eb261feceb2c1f20d940d9024fcc5fcc02
cbca121f6fca019fcaafca02c992081fc1b4241f9c9a371f9b9a321f999a
321f9a91321f9896301f9796481f9596481f96922d1f9491321f93912e1f
9192461f1f922f92029291201f4f915f91029f910140e0e0e00210de20de
0200de10de30de40de50de70de0640bc090b36b8ffc04050bb0c103610ba
0140b809103600b710b720b70360b570b502e3e5231fe4e5201f00ed30ed
60ed0350d50140d450d470d403f281151ff0b4321fefb4321f9fb401dbda
2c1fdadb211fdcdd2e1fddbe121fb8ffc0b3d30e1036b8ffc040ffd30a10
36d2be081fd1be121f0fd01fd02fd003cfbe191fc0be191fbf7d4b1fbdbe
1f1fbe7f391f8e8c4b1f8d8b4b1f8c8b281f8a8b431f898b431f8b7f471f
9d851a1f88852e1f87852a1f8685641f8485501f8385501f40853c3d3685
7f391fa082121f82804b1f817f4b1f4080414436807f281f7d7f4b1f7f7e
451f707e01407e41433629643b644b6459646064746406100f211f16152a
1f0706211f19182a1f0403211f13122a1f2c2d0f2a2b0e28290f26270e24
250f22230e20210f1e1f0e1b1c1d0d18191a0d1516170d1213140d0f1011
0c0c0d0e0c090a0b0c0607080c0304050c0001020c100f800f0240068006
0240038003020f003f004f0040267f00040f002f003f006f007f00bf00cf
00ff00081b3b081f0f3a081f0339081f0038081f503301b0124b004b5442
b013014b004b5342b0332b4bb8080052b0322b4bb009505b58b101018e59
b0332bb00288b8010054b00488b8020054b012435a5b58b80119b101018e
851bb0124358b10101b80180858d8d1bb10101b80180858d8d59592b1db0
644b5358b0701d59b0324b5358b0901d59002b2b2b2b73747373732b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb109322b4bb0645242
b1e9044523456861b0e92344b1eae94523456860b0ea234401b064204568
4473b07e4568b07e23442b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b732b2b2b2b2b2b2b2b732b2b2b7373732b2b73732b74
2b2b7374730073742b752b2b2b2b2b2b2b2b2b2b2b2b2b73742b73732b2b
2b2b2b2b000000>
[3137 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1150 23 <00020030000004ba05d1000a000d0092400e06180b10370c0c0b0d281216
370db8ffeeb70911370d06060707b8ffe0403f090f370607050a08090102
8d070b0403030c0e390c42000326033603460357036f037d0307030e0f0e
3a0a100320030203030f050609010d9a050503070603002f3f12392fed39
393230012f11332f5d332b07105de42b018710c0c0c0fdc0c0c0012f1112
392b8710dd2b2b08c031012b01230323132137013303332113010497dd62
c262fd38340392bad3ddfe619cfd2601a6fe5a01a6e30348fc6d02a1fd5f
>QJJAAA+VERDANA,Italic AddT42Char 
1 1972 28 <0002009effe304e005ef001f0031007c404a0510091714101a172f022c03
201b33013d223d2e43014d224d2e58055b225b2e66036210611f612a701b
15111d2c9a79140114269a14061d070a0a0e99061929891a1a112f030920
8a00b8ffc0b609103700003309b8ffc0b3090d37092f2b11332f2bed1117
392fed003ffd322f3f1239ed2f5ded123931305d01140207060423222627
37331e01333200370e01232226272e01353400333212073426272e012322
06151416333236373e0104e07e7579feadd4375622230a186940d6015038
63ae6e589d3a3b430158feddefc73028276738a9c494934caf520b0c03f5
d4fe7e8b90a10b0cb10b18011adc35342f31319267f70159fef0e45f8329
2825eeb07e852e2c346c>QJJAAA+VERDANA,Italic AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>QJJAAA+VERDANA,Italic AddT42Char 
QJJAAA+VERDANA,Italic /CharStrings get begin
/four 23 def
/nine 28 def
end
QJJAAA+VERDANA,Italic /Encoding get
dup 52 /four put
dup 57 /nine put
pop
end
%ADOEndSubsetFont
/MFKJYX+VERDANA,Italic /QJJAAA+VERDANA,Italic findfont ct_VMDictPut
/MFKJYX+VERDANA,Italic*1 
[52{/.notdef}rp /four 4{/.notdef}rp /nine 198{/.notdef}rp]
MFKJYX+VERDANA,Italic nf
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
617.9 234.29 mo
(4)sh
623.622 234.29 mo
(9)sh
637.8 235.55 mo
666.146 235.55 li
666.146 225.629 li
637.8 225.629 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 235.55 mo
666.146 235.55 li
666.146 225.629 li
637.8 225.629 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: QJJAAA+VERDANA,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+VERDANA,Italic gcheck setglobal} if
1 1360 24 <0001005affe1054905d10024007a402b00211021240d5a106b107c087609
0705200b10371b1c1c8d1718141717181818170e897d22012222170619b8
ffc0b6090d3719192606b8ffc040150c1037061717149a1f1b991f031806
07070b990319003fed332f3f1239ed2ffd322f30012f2b11332f2b123939
2f5ded2f332f872e2b7d10c431002b5d250e012322262737331e01333236
353426272e012322060713210721033e0133321615140603d358ea9e7ad8
47280e3ed271bae4342c2d7b4458b13eb0037d27fd455e294e28e1fb5c91
535d3c24c22f4dd8af445a1c1c181a0c02fba8fe660606c2a778d800>QJJAAA+VERDANA,Italic AddT42Char 
QJJAAA+VERDANA,Italic /CharStrings get begin
/five 24 def
end
QJJAAA+VERDANA,Italic /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYX+VERDANA,Italic*1 
[52{/.notdef}rp /four /five 3{/.notdef}rp /nine 198{/.notdef}rp]
MFKJYX+VERDANA,Italic nf
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
646.25 234.29 mo
(5)sh
651.972 234.29 mo
(4)sh
666.14 235.55 mo
694.486 235.55 li
694.486 225.629 li
666.14 225.629 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 235.55 mo
694.486 235.55 li
694.486 225.629 li
666.14 225.629 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: QJJAAA+VERDANA,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+VERDANA,Italic gcheck setglobal} if
1 256 19 <00020085ffe104e805ef0011002300534028090706101a0716103603390c
46034b0c7a0275197a220b159a7a0f010f071e9a7506010619128a00b8ff
c040090910370000251b8a09b8ffc0b3090d37092f2bed11332f2bed003f
5ded3f5ded3130015d011402070e01232226353412373e01333216073426
23220607060215141633323637361204e8936d5de194cbc68b755ae792ca
c6ca658260933d467265825b9c394672043ac6fde8907972d8ddb302209b
7873d9d9868e546a7bfe199e868e58667d01e700>QJJAAA+VERDANA,Italic AddT42Char 
QJJAAA+VERDANA,Italic /CharStrings get begin
/zero 19 def
end
QJJAAA+VERDANA,Italic /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYX+VERDANA,Italic*1 
[48{/.notdef}rp /zero 3{/.notdef}rp /four /five 3{/.notdef}rp /nine 198{/.notdef}rp]
MFKJYX+VERDANA,Italic nf
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
674.59 234.29 mo
(5)sh
680.312 234.29 mo
(0)sh
609.45 249.73 mo
637.796 249.73 li
637.796 239.809 li
609.45 239.809 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 249.73 mo
637.796 249.73 li
637.796 239.809 li
609.45 239.809 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
617.9 248.47 mo
(5)sh
623.622 248.47 mo
(4)sh
637.8 249.73 mo
666.146 249.73 li
666.146 239.809 li
637.8 239.809 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 249.73 mo
666.146 249.73 li
666.146 239.809 li
637.8 239.809 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
646.25 248.47 mo
(5)sh
651.972 248.47 mo
(0)sh
666.14 249.73 mo
694.486 249.73 li
694.486 239.809 li
666.14 239.809 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 249.73 mo
694.486 249.73 li
694.486 239.809 li
666.14 239.809 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
674.59 248.47 mo
(4)sh
680.312 248.47 mo
(4)sh
666.14 263.9 mo
694.486 263.9 li
694.486 253.979 li
666.14 253.979 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 263.9 mo
694.486 263.9 li
694.486 253.979 li
666.14 253.979 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: QJJAAA+VERDANA,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+VERDANA,Italic gcheck setglobal} if
1 456 20 <0001009b000003e805d6000c006b4045090303040a0b0b8d030414030304
0d390a041904590469047804050442770301030d0e0d3a1f016a05600c03
0c050101050c032003300340030303059c060609060b039b01002ffd323f
332fed30012f5d17332f2f2f5d2b07105de45d2b872e2b7d10c4018710c0
312901372113213732363733012103c3fcd8220132eafeca1dadbf209cfe
c901349103f481616ffabb00>QJJAAA+VERDANA,Italic AddT42Char 
1 870 22 <0001003affe104e805f00031008a405b022413242b05240d24243b05300d
4805400d5905592a690564096d0f6b186d2b7f0070097d0f7e1c701d7024
7d2b7a31182928129a60130113711e011e1e1a99130322077f070107070b
9903190e892f121e17891e12282f040625b8ffc0b6090f37252533062f11
332f2b121739ed2f2f2fed003fed332f5d3f1239ed332f5d2f5ded393931
305d250e012322262737331e013332363534262b01373332363534262322
060723373e0133321615140607151e01171e0115140603b858e59779e34e
2f0f45d074b4e6929a5f275fa9d8817e68ec5b0a2b50f76fc5e3dba7275f
2426335e834d553d2ac0344dd6ab69689f9b85545e4c36ca233b9d8894e5
1f0a082b212268476dcb>QJJAAA+VERDANA,Italic AddT42Char 
QJJAAA+VERDANA,Italic /CharStrings get begin
/one 20 def
/three 22 def
end
QJJAAA+VERDANA,Italic /Encoding get
dup 49 /one put
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYX+VERDANA,Italic*1 
[48{/.notdef}rp /zero /one /.notdef /three /four /five 3{/.notdef}rp 
/nine 198{/.notdef}rp]
MFKJYX+VERDANA,Italic nf
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
674.59 262.64 mo
(3)sh
680.312 262.64 mo
(1)sh
609.45 263.9 mo
637.796 263.9 li
637.796 253.979 li
609.45 253.979 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 263.9 mo
637.796 263.9 li
637.796 253.979 li
609.45 253.979 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
617.9 262.64 mo
(4)sh
623.622 262.64 mo
(4)sh
637.8 263.9 mo
666.146 263.9 li
666.146 253.979 li
637.8 253.979 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 263.9 mo
666.146 263.9 li
666.146 253.979 li
637.8 253.979 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
646.25 262.64 mo
(4)sh
651.972 262.64 mo
(4)sh
%ADOBeginSubsetFont: GFNBAA+VERDANA,BoldItalic Initial
ct_T42Dict begin
-0.535 -0.301 1.703 1.07
 256 array 0 1 255 {1 index exch /.notdef put} for  /GFNBAA+VERDANA,BoldItalic
Type42DictBegin
[<00010000000c000c000c000c4f532f3273dd7ecc000000cc000000606376
7420548064620000012c000001e86670676d9ab6568600000314000005eb
676c7966bb03e28f000029d00000046e68656164dee690a7000009000000
00366868656111680adf0000093800000024686d747826b2035c0000095c
0000081c6c6f6361e86ce96500001178000007706d617870065506550000
18e8000000206e616d65a0e458840000190800000d6170726570bc9e19b4
0000266c00000362676469720000000000000000000000000002048b02bc
00050008059a0533002c0125059a0533004c03a000d303050800020b0804
0305040b0204a10006ff4000205b00000010000000004d53202000210021
0072061efe5900ca080b01ae2000019f00000000046305d1000000200001
0614000a000005d1001f000005d1001f0000000000000000000000000000
045d001f00000000ffe100000000ffe100000000ffe10000fe64fff50000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000800000008000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000001d10229000000000000000000000000000001670000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000194018001780163017801630177016f01610161
0149011c019801820171016d015f0153009700e9011b011301080101011c
0109010100f501210113010800fd01bd011100d901590142000001300000
0000000000ed00d400f302e100a90000008400a800bf00d500e200f7010e
0125003b00000076002200280067004a0045013f01500168018101090118
013100e200bf00d400e600f00108010e0000011301200143019a01a601b8
01d1029902e302f90189024d02fb03ca0111012400ec00fa0262021201a2
01f4009a010e012c014000ba00c800d503b0001800ab00b5033203a60091
009b00d303ba004c403c543a393837363534333231302f2e2d2c2b2a2928
27262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a
090807060504030201002c01b0184358b119072b1b212121592d2c01b018
4358b11a072b1b212121592d2c01b0184358b0032510f221b000121b2121
21592d2c01b0184358b11b072b1b212121592d2c01b0184358b11c072b1b
212121592d2c01b0184358b11d072b1b212121592d2c01b0184358b11e07
2b1b212121592d2c4eb00014b046234344b0032510b10046e6b00013b001
14b00010f221b001134db000122d2c01b018435845646a234569b0194364
6060b0462344231020b046f02fb000121b21212121592d2c01b10b0a4323
43650a2d2c00b10a0b4323430b2d2c00b0462370b101463e01b0462370b1
0246453ab10200080d2d2cb0122bb0022545b00225456ab0408b60b00225
23442121212d2cb0132bb0022545b00225456ab8ffc08c60b00225234421
21212d2cb000b0122b2121212d2cb000b0132b2121212d2c01b00643b007
43650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c64236461
5c58b00361592d2cb100032545685458b0032545b0032545606820b00425
2344b0042523441bb00325204568208a2344b00325456860b00325234459
2d2cb00325204568208a2344b00325456860b0032523442d2cb009435887
21c01bb01243588745b0112bb0472344b0477ae41b038a45186920b04723
448a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae459595918
2d2c208a4523456860442d2c456a422d2c01182f2d2c21212d2c01b00225
45b002254564606ab00325456a6120b00425456a208a8b65b0042523448c
b00325234421212d2c01456823456961b00325456a6120b00425456a208a
8b65b0042523448cb00325234421212d2c018a8a45642345646164422d2c
01b0022543b04054b0022543b000545a58b003252045b040614459b00225
43b00054b0022543b040545a58b004252045b040604459212121212d2c01
4b525843b00225452361441b2121592d2c014b525843b00225452360441b
2121592d2c4b525845441b2121592d2c0120b003252349b04060b0206320
b000525823b002253823b002256538008a63381b212121212159012d2c4b
505845441b2121592d2c01b005251023208af500b0016023edec2d2c01b0
05251023208af500b0016123edec2d2c01b0062510f500edec2d2c462346
608a8a462320468a608a61b8ff8062232010238ab14b4b8a70456020b000
5058b00161b8ffba8b1bb0468c59b0106068013a2d2c2045b00325465258
3f1b2111592d2c2045b003254650583f1b2111592d2c00b00743b006430b
2d2c4b5258b00425b0042549b00425b00425496120b0005458212043b000
5558591bb04054582043b0005458591b2043b00054581bb00325b8ffc038
59595959212121212d2c4b52584365381b2121592d2c4b525843381b2121
592d2c21210c6423648bb84000622d2c21b08051580c6423648bb8200062
1bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb20080
2f2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b0
0826b00826b00826b008260f10161345683ab001162d2cb4000100000015
b00826b00826b00826b008260f1016134568653ab001162d2cb013435803
1b02592d2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb0282b
8a102320d023b0102bb00558c01b3c59201011b00012012d2c4b53234b51
5a5820458a60441b2121592d2c4b53234b515a58381b2121592d2c20b003
254523452361688a204568208a234460442d2c0120b0016020b040434823
2f003c012d2c2020b0016046b04023422fb0016020b064e000b003e0012d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b202020243604259b124018854
58b2022002436042004b014b5258b2020802436042591bb9400000808854
58b202040243604259b94000008063b80100885458b202080243604259b9
4000010063b80200885458b2021002436042595959592d00000100000005
07ae0eb2165b5f0f3cf5001b080000000000adc7790900000000c891c4cc
fbb4fd930da3089300030009000200000000000000010000080bfe520000
0e38fbb4fdf10da3000d0003000000000000000000000000005708000100
0000000002bc0000000000000338005004b3012f00000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000002e4003500000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000795003b000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000598004500000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000003fa00280000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000001f001f001f001f006100950095009500950095009500950095
009500950095009500ad00ad00ad00ad00ad00ad00ad00ad00ad00ad00ad
00ad00ad00ad00ad00ad00ad00ad00ad00ad00ad00ad00ad00ad00ad00ad
00ad00ad00ad00ad00ad0148014801480148014801480148014801480148
014801480148014801480148014801480148014801480148014801d201d2
01d201d201d201d201d201d201d201d201d201d201d201d2023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370237023702370237023702370237
023702370237023702370237023702370001000003b70027000200000000
00020010004100550000023605eb0000000000000046034e000100000000
0000003200000001000000000001000700320001000000000002000b007f
00010000000000030036006d000100000000000400130077000100000000
0005000c008b0001000000000006001200a30001000000000007003b0032
0001000000000009000e00b5000100000000000d014c00c3000100000000
000e002a020f0003000104030002001e02490003000104030004002e0239
0003000104050002001a02770003000104050004002a0267000300010406
0002001402a10003000104060004002402910003000104070002001602c5
0003000104070004002602b50003000104080002001a02f1000300010408
0004003002db00030001040900000064030b0003000104090001000e036f
0003000104090002001604090003000104090003006c03e5000300010409
0004002603f9000300010409000500180421000300010409000600240451
00030001040900070076036f0003000104090009001c0475000300010409
000d02980491000300010409000e0054072900030001040a0002001e078d
00030001040a0004002e077d00030001040b0002002407bb00030001040b
0004003407ab00030001040c0002001a07ef00030001040c0004002a07df
00030001040e0002001a081900030001040e0004002a0809000300010410
000200220843000300010410000400320833000300010413000200160875
0003000104130004002608650003000104140002001c089b000300010414
0004002c088b0003000104150002002408c70003000104150004003408b7
0003000104160002001e08fb0003000104160004002e08eb000300010419
00020022092900030001041900040032091900030001041b0002001a095b
00030001041b0004002a094b00030001041d00020014098500030001041d
00040024097500030001041f0002001809a900030001041f000400280999
0003000104240002001c09d10003000104240004002c09c100030001042d
0002001609fd00030001042d0004002609ed00030001080a0002001e078d
00030001080a0004002e077d0003000108160002001e08fb000300010816
0004002e08eb000300010c0a0002001e078d000300010c0a0004002e077d
000300010c0c0002001a07ef000300010c0c0004002a07dfa92032303130
204d6963726f736f667420436f72706f726174696f6e2e20416c6c205269
676874732052657365727665642e56657264616e61206973206120747261
64656d61726b206f6620746865204d6963726f736f66742067726f757020
6f6620636f6d70616e6965732e4d6963726f736f66743a56657264616e61
20426f6c64204974616c69633a56657273696f6e20352e303320284d6963
726f736f66742956657264616e612d426f6c644974616c69634d61747468
657720436172746572596f75206d617920757365207468697320666f6e74
206173207065726d6974746564206279207468652045554c4120666f7220
7468652070726f6475637420696e207768696368207468697320666f6e74
20697320696e636c7564656420746f20646973706c617920616e64207072
696e7420636f6e74656e742e20596f75206d6179206f6e6c792028692920
656d626564207468697320666f6e7420696e20636f6e74656e7420617320
7065726d69747465642062792074686520656d62656464696e6720726573
7472696374696f6e7320696e636c7564656420696e207468697320666f6e
743b20616e6420286969292074656d706f726172696c7920646f776e6c6f
6164207468697320666f6e7420746f2061207072696e746572206f72206f
74686572206f75747075742064657669636520746f2068656c7020707269
6e7420636f6e74656e742e687474703a2f2f7777772e6d6963726f736f66
742e636f6d2f7479706f6772617068792f666f6e74732f00560065007200
640061006e00610020004e00650067007200650074006100200063007500
72007300690076006100560065007200640061006e006100200074007501
0d006e00e90020006b00750072007a00ed00760061005600650072006400
61006e006100200066006500640020006b00750072007300690076005600
65007200640061006e0061002000460065007400740020004b0075007200
730069007600560065007200640061006e00610031003000360020038803
bd03c403bf03bd03b1002003a003bb03ac03b303b903b100a90020003200
30003100300020004d006900630072006f0073006f006600740020004300
6f00720070006f0072006100740069006f006e002e00200041006c006c00
200052006900670068007400730020005200650073006500720076006500
64002e00560065007200640061006e006100200069007300200061002000
740072006100640065006d00610072006b0020006f006600200074006800
650020004d006900630072006f0073006f00660074002000670072006f00
7500700020006f006600200063006f006d00700061006e00690065007300
2e004d006900630072006f0073006f00660074003a005600650072006400
61006e006100200042006f006c00640020004900740061006c0069006300
3a00560065007200730069006f006e00200035002e003000330020002800
4d006900630072006f0073006f0066007400290056006500720064006100
6e0061002d0042006f006c0064004900740061006c00690063004d006100
74007400680065007700200043006100720074006500720059006f007500
20006d006100790020007500730065002000740068006900730020006600
6f006e00740020006100730020007000650072006d006900740074006500
640020006200790020007400680065002000450055004c00410020006600
6f00720020007400680065002000700072006f0064007500630074002000
69006e002000770068006900630068002000740068006900730020006600
6f006e007400200069007300200069006e0063006c007500640065006400
200074006f00200064006900730070006c0061007900200061006e006400
20007000720069006e007400200063006f006e00740065006e0074002e00
200059006f00750020006d006100790020006f006e006c00790020002800
69002900200065006d006200650064002000740068006900730020006600
6f006e007400200069006e00200063006f006e00740065006e0074002000
6100730020007000650072006d0069007400740065006400200062007900
2000740068006500200065006d00620065006400640069006e0067002000
7200650073007400720069006300740069006f006e007300200069006e00
63006c007500640065006400200069006e00200074006800690073002000
66006f006e0074003b00200061006e006400200028006900690029002000
740065006d0070006f0072006100720069006c007900200064006f007700
6e006c006f006100640020007400680069007300200066006f006e007400
200074006f002000610020007000720069006e0074006500720020006f00
720020006f00740068006500720020006f00750074007000750074002000
640065007600690063006500200074006f002000680065006c0070002000
7000720069006e007400200063006f006e00740065006e0074002e006800
7400740070003a002f002f007700770077002e006d006900630072006f00
73006f00660074002e0063006f006d002f007400790070006f0067007200
61007000680079002f0066006f006e00740073002f005600650072006400
61006e00610020004e006500670072006900740061002000430075007200
7300690076006100560065007200640061006e00610020004c0069006800
610076006f0069007400750020004b00750072007300690076006f006900
560065007200640061006e00610020004700720061007300200049007400
61006c006900710075006500560065007200640061006e00610020004600
e9006c006b00f6007600e90072002000640151006c007400560065007200
640061006e0061002000470072006100730073006500740074006f002000
43006f0072007300690076006f00560065007200640061006e0061002000
560065007400200043007500720073006900650066005600650072006400
61006e0061002000480061006c00760066006500740020004b0075007200
730069007600560065007200640061006e006100200050006f0067007200
7500620069006f006e00610020006b007500720073007900770061005600
65007200640061006e00610020004e00650067007200690074006f002000
49007400e1006c00690063006f00560065007200640061006e0061002004
1f043e043b0443043604380440043d044b04390020041a04430440044104
38043200560065007200640061006e0061002000540075010d006e00e100
20006b00750072007a00ed0076006100560065007200640061006e006100
200046006500740020004b00750072007300690076005600650072006400
61006e00610020004b0061006c0131006e0020013000740061006c006900
6b00560065007200640061006e00610020004b007200650070006b006f00
200070006f016100650076006e006f00560065007200640061006e006100
20004c006f00640069002000650074007a0061006e0061000000401754e8
e61c1fe7e61c1f70d90140d60170d40120d330d302b8ffc0b6d309103670
ce01b8ffc0b7cd0b1036ccc7121fb8ffc0405cca0c1036c8c7121fc6c712
1fc5c7121fc792121f9f9a121fa99a201f9c9a201f9b9a241f999a241f9a
911b1ff198121fa798161f97982a1f9698251f9598251fcf98019892121f
0fa31fa3029491121f9391121f9192121f9291221fb8ffc04015910b1036
10ed20ed40ed50ed0440e00150de70de02b8ffc04018de0c103640bc090e
3654bb60bb70bb030fba0140b8091136b8ffc04029b7090b36e5e41b1fe3
e41b1f10ee01dddc121f2fdc3fdc02dadb1b1f00d510d520d530d560d570
d506b8ffc0400fd50a103650c460c470c403c1b3191fb8ffc0408ab30c10
362fb23fb202b0af121f70af01d2be121fd1be121fcf7d301fc3be121fc0
be081fbfbe141fbdbe121fbe7f1b1f8e8c191f8d8b191f8c8b2b1f8b7f2b
1f8a7e4b1f897d4b1f9d85121f8885121f8785121f86854b1f84852b1f83
853a1f857f231f2f857f858f8503cf8501a182111fa082111f82804b1f81
7f4b1f807f181f7d7f2e1f7f7e341fb8ffc040a47e0e103629643b644b64
59646064766406100f211f16152a1f0706211f19182a1f0403211f13122a
1f2c2d0f2a2b0e28290f26270e24250f22230e20210f1e1f0e1b1c1d0d18
191a0d1516170d1213140d0f10110c0c0d0e0c090a0b0c0607080c030405
0c0001020c100f800f02400680060240038003020f003f004f007f00040f
002f003f006f007f00bf00cf00ff00081b3b081f0f3a081f0339081f0038
081f503301b0124b004b5442b013014b004b5342b0332b4bb8080052b032
2b4bb009505b58b101018e59b0332bb00288b8010054b00488b8020054b0
12435a5b58b80119b101018e851bb0124358b10101b80180858d8d1bb101
01b80180858d8d59592b1db0644b5358b0701d59b0324b5358b0901d5900
2b2b2b2b73747373732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2bb109322b4bb0645242b1e9044523456861b0e92344b1eae9452345
6860b0ea234401b0642045684473b07e4568b07e23442b2b2b2b2b2b2b2b
74752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b732b2b732b
732b732b732b2b2b2b73732b2b737373002b2b2b2b2b732b742b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b732b737373732b2b2b000000>
[1135 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 298 17 <0001003500000207018900030015400b02d60103d201400d1337012f2bed
002fed31302901132101adfe885a01780189>GFNBAA+VERDANA,BoldItalic AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>GFNBAA+VERDANA,BoldItalic AddT42Char 
GFNBAA+VERDANA,BoldItalic /CharStrings get begin
/period 17 def
end
GFNBAA+VERDANA,BoldItalic /Encoding get
dup 46 /period put
pop
end
%ADOEndSubsetFont
/MFKJYY+VERDANA,BoldItalic /GFNBAA+VERDANA,BoldItalic findfont ct_VMDictPut
/MFKJYY+VERDANA,BoldItalic*1 
[46{/.notdef}rp /period 209{/.notdef}rp]
MFKJYY+VERDANA,BoldItalic nf
MFKJYY+VERDANA,BoldItalic*1 [7.99992 0 0 -7.99992 0 0 ]msf
647.63 271.04 mo
(.)sh
650.521 271.04 mo
(.)sh
653.411 271.04 mo
(.)sh
609.45 292.25 mo
637.796 292.25 li
637.796 282.329 li
609.45 282.329 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 292.25 mo
637.796 292.25 li
637.796 282.329 li
609.45 282.329 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
617.9 290.99 mo
(4)sh
623.622 290.99 mo
(9)sh
637.8 292.25 mo
666.146 292.25 li
666.146 282.329 li
637.8 282.329 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 292.25 mo
666.146 292.25 li
666.146 282.329 li
637.8 282.329 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
646.25 290.99 mo
(5)sh
651.972 290.99 mo
(5)sh
666.14 292.25 mo
694.486 292.25 li
694.486 282.329 li
666.14 282.329 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 292.25 mo
694.486 292.25 li
694.486 282.329 li
666.14 282.329 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
674.59 290.99 mo
(5)sh
680.312 290.99 mo
(5)sh
609.45 306.42 mo
637.796 306.42 li
637.796 296.499 li
609.45 296.499 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 306.42 mo
637.796 306.42 li
637.796 296.499 li
609.45 296.499 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
617.9 305.16 mo
(5)sh
623.622 305.16 mo
(5)sh
637.8 306.42 mo
666.146 306.42 li
666.146 296.499 li
637.8 296.499 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 306.42 mo
666.146 306.42 li
666.146 296.499 li
637.8 296.499 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
646.25 305.16 mo
(5)sh
651.972 305.16 mo
(5)sh
666.14 306.42 mo
694.486 306.42 li
694.486 296.499 li
666.14 296.499 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 306.42 mo
694.486 306.42 li
694.486 296.499 li
666.14 296.499 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: QJJAAA+VERDANA,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+VERDANA,Italic gcheck setglobal} if
1 1598 27 <0003005bffde04f005f3001c002b003d00be4067500e5d31503966156c1e
60256026602a6d3162397f177f197f1e73257f307f317f327a3773391303
1212122218300e3a1c332533374f00400e412542370b0602340a440a0235
0a16290403209b10073b9b03190a350d2f892916201a011a23890d1d8a1a
0d0613b8ffc0400e090d3713133f38893006400602062f5ded11332f2b12
3939ed2fed2f5d3939fd113939003fed3fed1217395d4354584013293236
26462659326426953206323b352629201112391112395d5931305d5d250e
0123222635343637352e0135340033321615140607151e01151406033426
232206151416171e01173e01033e01353426272e01270e01151416333236
03eb53da92d6fbb6ae5a5a014deec5e5a59c6f7358138a748cc241402576
467d6dc12c2d48572b69577f88977d6693804a58cfa297f14805368756b4
0108b48b78e5410634947057bc03d657759772395f221334174aa5fca62f
783d44642c1526223ecc7370973f>QJJAAA+VERDANA,Italic AddT42Char 
QJJAAA+VERDANA,Italic /CharStrings get begin
/eight 27 def
end
QJJAAA+VERDANA,Italic /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYX+VERDANA,Italic*1 
[48{/.notdef}rp /zero /one /.notdef /three /four /five 2{/.notdef}rp 
/eight /nine 198{/.notdef}rp]
MFKJYX+VERDANA,Italic nf
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
674.59 305.16 mo
(4)sh
680.312 305.16 mo
(8)sh
666.14 320.59 mo
694.486 320.59 li
694.486 310.669 li
666.14 310.669 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
666.14 320.59 mo
694.486 320.59 li
694.486 310.669 li
666.14 310.669 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
674.59 319.33 mo
(4)sh
680.312 319.33 mo
(5)sh
609.45 320.59 mo
637.796 320.59 li
637.796 310.669 li
609.45 310.669 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
609.45 320.59 mo
637.796 320.59 li
637.796 310.669 li
609.45 310.669 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
617.9 319.33 mo
(5)sh
623.622 319.33 mo
(5)sh
637.8 320.59 mo
666.146 320.59 li
666.146 310.669 li
637.8 310.669 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
637.8 320.59 mo
666.146 320.59 li
666.146 310.669 li
637.8 310.669 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
646.25 319.33 mo
(4)sh
651.972 319.33 mo
(8)sh
MFKJYY+VERDANA,BoldItalic*1 [7.99992 0 0 -7.99992 0 0 ]msf
647.63 327.74 mo
(.)sh
650.521 327.74 mo
(.)sh
653.411 327.74 mo
(.)sh
.23998 lw
566.93 194.37 mo
575.81 206.05 582.83 219.02 587.76 232.84 cv
589.41 237.44 591.59 241.84 594.28 245.92 cv
@
596.69 249.33 mo
591.25 246.42 li
593.17 246.12 594.84 244.94 595.76 243.23 cv
596.69 249.33 li
cp
ef
566.93 141.3 mo
576.2 123.25 583.44 104.23 588.51 84.5803 cv
590.33 77.5103 592.81 70.6203 595.91 64.0203 cv
@
597.76 60.2703 mo
592.84 64.0003 li
594.79 63.9903 596.62 64.8903 597.8 66.4403 cv
597.76 60.2703 li
cp
ef
566.93 165.4 mo
575.26 160.32 582.38 153.47 587.76 145.34 cv
589.3 143.02 591.16 140.94 593.29 139.17 cv
@
596.69 136.74 mo
590.6 137.7 li
592.31 138.61 593.5 140.27 593.81 142.19 cv
596.69 136.74 li
cp
ef
566.93 179.48 mo
574.86 180.42 582.34 183.62 588.51 188.69 cv
590.06 189.97 591.81 190.97 593.69 191.66 cv
@
597.76 192.64 mo
591.74 194.03 li
592.99 192.55 593.47 190.56 593.03 188.67 cv
597.76 192.64 li
cp
ef
566.93 208.54 mo
576.25 230.56 583.47 253.4 588.51 276.78 cv
590.37 285.43 592.94 293.92 596.18 302.15 cv
@
597.76 306.02 mo
593.11 301.96 li
595.05 302.1 596.94 301.33 598.23 299.87 cv
597.76 306.02 li
cp
ef
%ADOBeginSubsetFont: HIBBAA+VERDANA,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+VERDANA,Bold gcheck setglobal} if
1 466 46 <000100be0000062c05d1000b0126b300020002435558403b390235084d02
45086d0265087b02070202030181000b00080980020102030a0b0a000102
0304060708090b0a050a03050a0102090b0a05400d0100b8ffc040100910
3700000d0406070804037f05b50c10f6fd173911332f2b5d17392f002f3f
121739008710c008c005fd04c0018710fd08c0005d594354584060040b15
0b29093909360b5d096b026d097909760b0a040214025003640260037402
740b0702020301200924370181000b00420b01080920091d370980020102
030a0b0a4d0b010708000204050a0305220b330b02400a010a020b0a0340
0d0100b8ffc0400c09103700000d08037f05b50c0110f6fd3211332f2b5d
17392f5d5d002f3f12173931305d008710c008c005fd2b04c0015d8710fd
2b08c0005d015d59290101071121112111012101062cfe29fe435afe8001
80021401bdfdba02546dfe1905d1fd5e02a2fd4f>HIBBAA+VERDANA,Bold AddT42Char 
1 1058 49 <000100be0000060805d1000900bc40494f024007028f0280070206021602
020006100620064701490678070600022d01010602070801020403060303
2306300140015301600170017706070601020740091037078000b60b0bb8
ffc0b60d1037000b0102b8ffc0b7091037028004b50a10f6ed2b5d2b10f6
fd2b1139395d002f3f12173943545840192b0224073b0234074b0244075b
0254076d0262077f0270070c5d5931305d435458b0114b5258400b070102
0282060714060607872e2b877dc45959015d005d71722901011121112101
11210608fe8efd88fea001cb021f016003fefc0205d1fcab0355>HIBBAA+VERDANA,Bold AddT42Char 
HIBBAA+VERDANA,Bold /CharStrings get begin
/K 46 def
/N 49 def
end
HIBBAA+VERDANA,Bold /Encoding get
dup 75 /K put
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYW+VERDANA,Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period 28{/.notdef}rp /K 2{/.notdef}rp /N 
2{/.notdef}rp /Q /R /.notdef /T 12{/.notdef}rp /a /b 
/c /.notdef /e /.notdef /g /.notdef /i 4{/.notdef}rp 
/n 2{/.notdef}rp /q /r /s /.notdef /u /.notdef 
/w /.notdef /y 134{/.notdef}rp]
MFKJYW+VERDANA,Bold nf
MFKJYW+VERDANA,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
639.02 12.7803 mo
(K)sh
646.73 12.7803 mo
(N)sh
655.197 12.7803 mo
(N)sh
MFKJYW+VERDANA,Bold*1 [7.99992 0 0 -7.99992 0 0 ]msf
155.43 109.55 mo
(Q)sh
162.231 109.55 mo
(u)sh
167.93 109.55 mo
(e)sh
173.242 109.55 mo
(r)sh
177.219 109.55 mo
(y)sh
182.426 109.55 mo
( )sh
185.16 109.55 mo
(s)sh
189.906 109.55 mo
(u)sh
195.606 109.55 mo
(b)sh
201.199 109.55 mo
(s)sh
205.945 109.55 mo
(e)sh
211.258 109.55 mo
(q)sh
216.852 109.55 mo
(u)sh
222.551 109.55 mo
(e)sh
227.863 109.55 mo
(n)sh
233.562 109.55 mo
(c)sh
238.269 109.55 mo
(e)sh
243.582 109.55 mo
(s)sh
155.91 124.37 mo
184.256 124.37 li
184.256 114.449 li
155.91 114.449 li
cp
.00604257 .167544 .248875 0 cmyk
ef
.72 lw
155.91 124.37 mo
184.256 124.37 li
184.256 114.449 li
155.91 114.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
167.22 123.11 mo
(3)sh
184.25 124.37 mo
212.596 124.37 li
212.596 114.449 li
184.25 114.449 li
cp
.00604257 .167544 .248875 0 cmyk
ef
184.25 124.37 mo
212.596 124.37 li
212.596 114.449 li
184.25 114.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
195.56 123.11 mo
(4)sh
212.6 124.37 mo
240.946 124.37 li
240.946 114.449 li
212.6 114.449 li
cp
.00604257 .167544 .248875 0 cmyk
ef
212.6 124.37 mo
240.946 124.37 li
240.946 114.449 li
212.6 114.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
223.91 123.11 mo
(1)sh
155.91 124.37 mo
184.256 124.37 li
184.256 114.449 li
155.91 114.449 li
cp
.00604257 .167544 .248875 0 cmyk
ef
155.91 124.37 mo
184.256 124.37 li
184.256 114.449 li
155.91 114.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
164.36 123.11 mo
(5)sh
170.082 123.11 mo
(1)sh
184.25 124.37 mo
212.596 124.37 li
212.596 114.449 li
184.25 114.449 li
cp
.00604257 .167544 .248875 0 cmyk
ef
184.25 124.37 mo
212.596 124.37 li
212.596 114.449 li
184.25 114.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
192.7 123.11 mo
(5)sh
198.422 123.11 mo
(3)sh
212.6 124.37 mo
240.946 124.37 li
240.946 114.449 li
212.6 114.449 li
cp
.00604257 .167544 .248875 0 cmyk
ef
212.6 124.37 mo
240.946 124.37 li
240.946 114.449 li
212.6 114.449 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
221.05 123.11 mo
(5)sh
226.772 123.11 mo
(4)sh
184.25 138.55 mo
212.596 138.55 li
212.596 128.629 li
184.25 128.629 li
cp
.00604257 .167544 .248875 0 cmyk
ef
184.25 138.55 mo
212.596 138.55 li
212.596 128.629 li
184.25 128.629 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
195.56 137.29 mo
(3)sh
212.6 138.55 mo
240.946 138.55 li
240.946 128.629 li
212.6 128.629 li
cp
.00604257 .167544 .248875 0 cmyk
ef
212.6 138.55 mo
240.946 138.55 li
240.946 128.629 li
212.6 128.629 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
223.91 137.29 mo
(4)sh
155.91 138.55 mo
184.256 138.55 li
184.256 128.629 li
155.91 128.629 li
cp
.00604257 .167544 .248875 0 cmyk
ef
155.91 138.55 mo
184.256 138.55 li
184.256 128.629 li
155.91 128.629 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
167.22 137.29 mo
(2)sh
184.25 138.55 mo
212.596 138.55 li
212.596 128.629 li
184.25 128.629 li
cp
.00604257 .167544 .248875 0 cmyk
ef
184.25 138.55 mo
212.596 138.55 li
212.596 128.629 li
184.25 128.629 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
192.7 137.29 mo
(4)sh
198.422 137.29 mo
(4)sh
212.6 138.55 mo
240.946 138.55 li
240.946 128.629 li
212.6 128.629 li
cp
.00604257 .167544 .248875 0 cmyk
ef
212.6 138.55 mo
240.946 138.55 li
240.946 128.629 li
212.6 128.629 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
221.05 137.29 mo
(3)sh
226.772 137.29 mo
(4)sh
155.91 138.55 mo
184.256 138.55 li
184.256 128.629 li
155.91 128.629 li
cp
.00604257 .167544 .248875 0 cmyk
ef
155.91 138.55 mo
184.256 138.55 li
184.256 128.629 li
155.91 128.629 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
164.36 137.29 mo
(4)sh
170.082 137.29 mo
(2)sh
212.6 152.72 mo
240.946 152.72 li
240.946 142.799 li
212.6 142.799 li
cp
.00604257 .167544 .248875 0 cmyk
ef
212.6 152.72 mo
240.946 152.72 li
240.946 142.799 li
212.6 142.799 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
223.91 151.46 mo
(3)sh
155.91 152.72 mo
184.256 152.72 li
184.256 142.799 li
155.91 142.799 li
cp
.00604257 .167544 .248875 0 cmyk
ef
155.91 152.72 mo
184.256 152.72 li
184.256 142.799 li
155.91 142.799 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
167.22 151.46 mo
(1)sh
184.25 152.72 mo
212.596 152.72 li
212.596 142.799 li
184.25 142.799 li
cp
.00604257 .167544 .248875 0 cmyk
ef
184.25 152.72 mo
212.596 152.72 li
212.596 142.799 li
184.25 142.799 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
195.56 151.46 mo
(2)sh
212.6 152.72 mo
240.946 152.72 li
240.946 142.799 li
212.6 142.799 li
cp
.00604257 .167544 .248875 0 cmyk
ef
212.6 152.72 mo
240.946 152.72 li
240.946 142.799 li
212.6 142.799 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
221.05 151.46 mo
(6)sh
226.772 151.46 mo
(5)sh
155.91 152.72 mo
184.256 152.72 li
184.256 142.799 li
155.91 142.799 li
cp
.00604257 .167544 .248875 0 cmyk
ef
155.91 152.72 mo
184.256 152.72 li
184.256 142.799 li
155.91 142.799 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
164.36 151.46 mo
(5)sh
170.082 151.46 mo
(5)sh
184.25 152.72 mo
212.596 152.72 li
212.596 142.799 li
184.25 142.799 li
cp
.00604257 .167544 .248875 0 cmyk
ef
184.25 152.72 mo
212.596 152.72 li
212.596 142.799 li
184.25 142.799 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYV+VERDANA*1 [9 0 0 -9 0 0 ]msf
192.7 151.46 mo
(5)sh
198.422 151.46 mo
(7)sh
%ADOBeginSubsetFont: HIBBAA+VERDANA,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+VERDANA,Bold gcheck setglobal} if
1 354 41 <000100be000004e905d10009004240140591300240026002030202070191
080307030300b8ffc04011090d3700000b2f0b4f0b0202057f07b50a10f6
fd325d11332f2b332f002f3fed12392f5ded313001211121112111211121
04e9fd53027bfd85fe82042b04b1feebfee0fd8405d1>HIBBAA+VERDANA,Bold AddT42Char 
1 816 48 <000100be000006d705d1000c00b5b90003ffc040420d103704400d10370b
0b1b0b2b0b0300090c0a0f0b10091c0a1f0b26032c042f0a2f0b3b0a3b0b
4f09490a7a0b84098a0b9409970a9b0b14360a590a7f027f05040ab8ffc0
401c0e123705800c103702800c103705020a03092f043f04600470040404
b8ffc040180c1037040b000403070903070b0905027f00b60e000e0105b8
ffc0b7091037058207b50d10f6ed2b5d10f6ed113939002f3f1217392f2b
5d12173931302b2b2b5d015d5d2b2b2901110121011121112109012106d7
fe82feecfef7feecfe9601be014f014e01be03e5fd790287fc1b05d1fd15
02eb>HIBBAA+VERDANA,Bold AddT42Char 
1 1804 54 <0001006dffe5056605ec003300bcb90022ff80400e0d103708800d103705
1e090e371fb8ffe24046090e370b181b1836013a1b45014a1b5133650976
097513781777310c0602000200111a2b041d033f2101212125931d042007
300770070307070b930313202b7d1a117d201a00b8ffc04009090e370000
3506b73410e611332f2b3939ed2fed2f003fed332f5d3fed332f5d111217
394354584019042b142b3a11352b4a11452b5a11552b6b11652b7b11742b
0c5d59435458b4072b172b025d5931305d2b2b012b2b0114002122242711
331604333236373e01353426272e01272e01353400213204171123262423
2206070e01151416171e01171e010566fe8bfec0b9feed782a7701278823
72242c39535054bb52bca50175012593011f69295afefb88305f2c27385a
7d529757aba301d4dcfeed413201655f660c0e12363531471314231b3dd1
9bd00107392bfea948610d120f3d273b3f1a11201c38c100>HIBBAA+VERDANA,Bold AddT42Char 
1 3542 75 <000100aa000005120614001600384023011513153c1170150401100d0895
13100e000d018400ba183018601802100b840db91710f6fd325d10f6ed00
2f3f3fed12393931305d2121113426272626232206071121112111363633
3216150512fe960e11144d4531653bfe98016860b16cb6cd022d44872025
222023fce40614fdd34b50d4d300>HIBBAA+VERDANA,Bold AddT42Char 
1 4642 87 <0001002bffea037805a4001b004a402c0a051b05020f0b700b020b100d07
a70b0a0f1b1b17a703160e40000100001d0f1d01080d10840a086f070107
2f5d3333fd322f5d11332f5d33003ffd322f3f33ed39392f5d31305d250e
012322263511233533112111211521111416171e01333236373303783a82
5ed2cd949401680151feaf020f0e47441c5b121e0a0f11aace020df40141
febff4fe723b58232329180a>HIBBAA+VERDANA,Bold AddT42Char 
HIBBAA+VERDANA,Bold /CharStrings get begin
/F 41 def
/M 48 def
/S 54 def
/h 75 def
/t 87 def
end
HIBBAA+VERDANA,Bold /Encoding get
dup 70 /F put
dup 77 /M put
dup 83 /S put
dup 104 /h put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYW+VERDANA,Bold*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period 23{/.notdef}rp /F 4{/.notdef}rp /K 
/.notdef /M /N 2{/.notdef}rp /Q /R /S /T 
12{/.notdef}rp /a /b /c /.notdef /e /.notdef /g 
/h /i 4{/.notdef}rp /n 2{/.notdef}rp /q /r /s 
/t /u /.notdef /w /.notdef /y 134{/.notdef}rp]
MFKJYW+VERDANA,Bold nf
MFKJYW+VERDANA,Bold*1 [10.0001 0 0 -10.0001 0 0 ]msf
153.45 74.1703 mo
(F)sh
159.954 74.1703 mo
(a)sh
166.634 74.1703 mo
(s)sh
172.566 74.1703 mo
(t)sh
177.122 74.1703 mo
( )sh
180.54 74.1703 mo
(S)sh
187.644 74.1703 mo
(u)sh
194.768 74.1703 mo
(b)sh
201.761 74.1703 mo
(s)sh
207.693 74.1703 mo
(e)sh
214.334 74.1703 mo
(q)sh
221.326 74.1703 mo
(u)sh
228.45 74.1703 mo
(e)sh
235.091 74.1703 mo
(n)sh
242.215 74.1703 mo
(c)sh
248.099 74.1703 mo
(e)sh
254.74 74.1703 mo
( )sh
178.47 86.8103 mo
(M)sh
187.947 86.8103 mo
(a)sh
194.627 86.8103 mo
(t)sh
199.183 86.8103 mo
(c)sh
205.066 86.8103 mo
(h)sh
212.191 86.8103 mo
(i)sh
215.608 86.8103 mo
(n)sh
222.733 86.8103 mo
(g)sh
170.08 198.95 mo
198.426 198.95 li
198.426 189.029 li
170.08 189.029 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
170.08 198.95 mo
198.426 198.95 li
198.426 189.029 li
170.08 189.029 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: QJJAAA+VERDANA,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+VERDANA,Italic gcheck setglobal} if
1 2742 73 <00010044000003ec061e00180083405676050106080b0c86130e0d110d6f
1a014009500970090309090d000f100f200f2018300f30188f1807180f18
1a0f1a010f19391142260d350d4c0d5d0d750d050d191a193a0d00000497
06150115010b080e98110f0d002f3fed39393f5dfd322f30012f2b07105d
e42b335d11332f2f5d12392f5d5d1087c0c0fdc0c0c031015d01232e0123
22060f01210721032313233733373e013332161703c50a1d60267b7b1f09
015324feb3dabeda7f247f0829efbc3f662905650a127c822696fc3903c7
9625c4d80c08>QJJAAA+VERDANA,Italic AddT42Char 
QJJAAA+VERDANA,Italic /CharStrings get begin
/f 73 def
end
QJJAAA+VERDANA,Italic /Encoding get
dup 102 /f put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYX+VERDANA,Italic*1 
[48{/.notdef}rp /zero /one /.notdef /three /four /five 2{/.notdef}rp 
/eight /nine 44{/.notdef}rp /f 153{/.notdef}rp]
MFKJYX+VERDANA,Italic nf
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
178.86 197.69 mo
(f)sh
MFKJYX+VERDANA,Italic*1 [5.9999 0 0 -5.9999 0 0 ]msf
182.02 197.69 mo
(1)sh
185.834 197.69 mo
(1)sh
198.43 198.95 mo
226.776 198.95 li
226.776 189.029 li
198.43 189.029 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
198.43 198.95 mo
226.776 198.95 li
226.776 189.029 li
198.43 189.029 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: QJJAAA+VERDANA,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal QJJAAA+VERDANA,Italic gcheck setglobal} if
1 618 21 <00010022000004be05f0001d009940490f0402151c0412152e042f052411
2d1a3b033f043f05330733173e1a4f044f05430744174f1a6e046c056015
6f1a7d057f0d710e70157f187f1a1d700f010f0f0b991307021c99011db8
ffc0b30e10371cb8ffc0401b091037200f300f400f600f700f051d0f1c1d
0f030208897f160116b8ffc0b6090b3716161f012f11332f2b5ded121739
2f2f5d2b2b002ffd323fed332f5d31305d2901373e013736123534262322
060723373e0133321615140207060407210413fc0f2f8dc58bf4c98b6d59
e56e0a284ff671c9dab8e689fedf5e0320d167916fc3010b7e6264433fcb
2439af95a1fee1bf71d54300>QJJAAA+VERDANA,Italic AddT42Char 
QJJAAA+VERDANA,Italic /CharStrings get begin
/two 21 def
end
QJJAAA+VERDANA,Italic /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYX+VERDANA,Italic*1 
[48{/.notdef}rp /zero /one /two /three /four /five 2{/.notdef}rp 
/eight /nine 44{/.notdef}rp /f 153{/.notdef}rp]
MFKJYX+VERDANA,Italic nf
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
207.2 197.69 mo
(f)sh
MFKJYX+VERDANA,Italic*1 [5.9999 0 0 -5.9999 0 0 ]msf
210.37 197.69 mo
(1)sh
214.184 197.69 mo
(2)sh
170.08 210.28 mo
198.426 210.28 li
198.426 200.359 li
170.08 200.359 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
170.08 210.28 mo
198.426 210.28 li
198.426 200.359 li
170.08 200.359 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
178.86 209.02 mo
(f)sh
MFKJYX+VERDANA,Italic*1 [5.9999 0 0 -5.9999 0 0 ]msf
182.02 209.02 mo
(2)sh
185.834 209.02 mo
(1)sh
198.43 210.28 mo
226.776 210.28 li
226.776 200.359 li
198.43 200.359 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
198.43 210.28 mo
226.776 210.28 li
226.776 200.359 li
198.43 200.359 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
207.2 209.02 mo
(f)sh
MFKJYX+VERDANA,Italic*1 [5.9999 0 0 -5.9999 0 0 ]msf
210.37 209.02 mo
(2)sh
214.184 209.02 mo
(2)sh
170.08 221.62 mo
198.426 221.62 li
198.426 211.699 li
170.08 211.699 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
170.08 221.62 mo
198.426 221.62 li
198.426 211.699 li
170.08 211.699 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
178.86 220.36 mo
(f)sh
MFKJYX+VERDANA,Italic*1 [5.9999 0 0 -5.9999 0 0 ]msf
182.02 220.36 mo
(3)sh
185.834 220.36 mo
(1)sh
198.43 221.62 mo
226.776 221.62 li
226.776 211.699 li
198.43 211.699 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
198.43 221.62 mo
226.776 221.62 li
226.776 211.699 li
198.43 211.699 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
207.2 220.36 mo
(f)sh
MFKJYX+VERDANA,Italic*1 [5.9999 0 0 -5.9999 0 0 ]msf
210.37 220.36 mo
(3)sh
214.184 220.36 mo
(2)sh
170.08 232.96 mo
198.426 232.96 li
198.426 223.039 li
170.08 223.039 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
170.08 232.96 mo
198.426 232.96 li
198.426 223.039 li
170.08 223.039 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
178.86 231.7 mo
(f)sh
MFKJYX+VERDANA,Italic*1 [5.9999 0 0 -5.9999 0 0 ]msf
182.02 231.7 mo
(4)sh
185.834 231.7 mo
(1)sh
198.43 232.96 mo
226.776 232.96 li
226.776 223.039 li
198.43 223.039 li
cp
1 /0 /CSD get_res sepcs
.051 sep
ef
198.43 232.96 mo
226.776 232.96 li
226.776 223.039 li
198.43 223.039 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
MFKJYX+VERDANA,Italic*1 [9 0 0 -9 0 0 ]msf
207.2 231.7 mo
(f)sh
MFKJYX+VERDANA,Italic*1 [5.9999 0 0 -5.9999 0 0 ]msf
210.37 231.7 mo
(4)sh
214.184 231.7 mo
(2)sh
%ADOBeginSubsetFont: HIBBAA+VERDANA,Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal HIBBAA+VERDANA,Bold gcheck setglobal} if
1 244 16 <0001006e0206036903260003001c401001d70210006000020000022f054f
05025d2f332f5d002fed3130012111210369fd0502fb02060120>HIBBAA+VERDANA,Bold AddT42Char 
1 3898 83 <000200aafe64053e048200130020003f402b4402440f4420520f5213650f
641379087f1c09179611100c0f1e9706160b1b148300bc220e1b09840cb9
2110f6fd323210f6ed003f3fed3f3fed31305d0114060706062322262711
21112115363633321201342623220607111616333236053e554548b66860
8646fe98016853ad71d2e9fe8d7079336c312452288f8c02418be44a4e50
2925fe2c05ff754252feccfeeca4941f1dfdcb0e08a7>HIBBAA+VERDANA,Bold AddT42Char 
HIBBAA+VERDANA,Bold /CharStrings get begin
/hyphen 16 def
/p 83 def
end
HIBBAA+VERDANA,Bold /Encoding get
dup 45 /hyphen put
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/MFKJYW+VERDANA,Bold*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period 23{/.notdef}rp /F 4{/.notdef}rp 
/K /.notdef /M /N 2{/.notdef}rp /Q /R /S 
/T 12{/.notdef}rp /a /b /c /.notdef /e /.notdef 
/g /h /i 4{/.notdef}rp /n /.notdef /p /q 
/r /s /t /u /.notdef /w /.notdef /y 
134{/.notdef}rp]
MFKJYW+VERDANA,Bold nf
MFKJYW+VERDANA,Bold*1 [7.99992 0 0 -7.99992 0 0 ]msf
194.09 242.23 mo
(.)sh
196.981 242.23 mo
(.)sh
199.871 242.23 mo
(.)sh
153.5 183.25 mo
(S)sh
159.184 183.25 mo
(p)sh
164.777 183.25 mo
(a)sh
170.121 183.25 mo
(c)sh
174.828 183.25 mo
(e)sh
180.14 183.25 mo
(-)sh
183.98 183.25 mo
(s)sh
188.726 183.25 mo
(e)sh
194.039 183.25 mo
(r)sh
198.015 183.25 mo
(i)sh
200.75 183.25 mo
(e)sh
206.062 183.25 mo
(s)sh
210.808 183.25 mo
( )sh
213.543 183.25 mo
(s)sh
218.289 183.25 mo
(e)sh
223.601 183.25 mo
(q)sh
229.195 183.25 mo
(u)sh
234.894 183.25 mo
(e)sh
240.206 183.25 mo
(n)sh
245.906 183.25 mo
(c)sh
250.613 183.25 mo
(e)sh
.23998 lw
311.81 141.3 mo
298.7 141.72 285.61 139.87 273.12 135.84 cv
269.1 134.54 264.93 133.77 260.71 133.55 cv
@
256.54 133.5 mo
262.09 130.8 li
261.2 132.53 261.18 134.57 262.02 136.32 cv
256.54 133.5 li
cp
ef
311.81 141.3 mo
298.7 141.72 285.61 139.87 273.12 135.84 cv
269.1 134.54 264.93 133.77 260.71 133.55 cv
@
256.54 133.5 mo
262.09 130.8 li
261.2 132.53 261.18 134.57 262.02 136.32 cv
256.54 133.5 li
cp
ef
311.81 165.4 mo
297.43 175.8 284.43 187.99 273.12 201.67 cv
269.16 206.45 264.72 210.82 259.86 214.69 cv
@
256.54 217.21 mo
262.6 216.07 li
260.86 215.21 259.62 213.59 259.26 211.68 cv
256.54 217.21 li
cp
ef
311.81 179.48 mo
297.71 186.39 284.68 195.28 273.12 205.89 cv
269.19 209.5 264.87 212.64 260.23 215.26 cv
@
256.54 217.21 mo
262.71 217.08 li
261.13 215.95 260.17 214.14 260.13 212.2 cv
256.54 217.21 li
cp
ef
311.81 194.37 mo
298.14 197.59 285.07 202.99 273.12 210.36 cv
269.19 212.78 264.97 214.71 260.56 216.1 cv
@
256.54 217.21 mo
262.59 218.41 li
261.29 216.96 260.75 214.99 261.12 213.09 cv
256.54 217.21 li
cp
ef
311.81 208.54 mo
298.66 208.33 285.57 210.38 273.12 214.61 cv
269.11 215.97 264.94 216.81 260.71 217.1 cv
@
256.54 217.21 mo
262.13 219.83 li
261.21 218.11 261.16 216.07 261.98 214.31 cv
256.54 217.21 li
cp
ef
1 lw
604.13 41.2203 mo
602.37 41.2203 600.94 42.6403 600.94 44.4103 cv
600.94 57.0803 li
600.94 58.8403 599.52 60.2703 597.76 60.2703 cv
599.52 60.2703 600.94 61.6903 600.94 63.4503 cv
600.94 76.1303 li
600.94 77.8903 602.37 79.3103 604.13 79.3103 cv
@
604.13 112.25 mo
602.37 112.25 600.94 113.67 600.94 115.44 cv
600.94 133.55 li
600.94 135.31 599.52 136.74 597.76 136.74 cv
599.52 136.74 600.94 138.17 600.94 139.93 cv
600.94 158.04 li
600.94 159.8 602.37 161.23 604.13 161.23 cv
@
604.13 168.15 mo
602.37 168.15 600.94 169.57 600.94 171.33 cv
600.94 189.45 li
600.94 191.21 599.52 192.64 597.76 192.64 cv
599.52 192.64 600.94 194.06 600.94 195.83 cv
600.94 213.94 li
600.94 215.7 602.37 217.13 604.13 217.13 cv
@
604.13 224.84 mo
602.37 224.84 600.94 226.27 600.94 228.03 cv
600.94 246.14 li
600.94 247.9 599.52 249.33 597.76 249.33 cv
599.52 249.33 600.94 250.76 600.94 252.52 cv
600.94 270.63 li
600.94 272.39 602.37 273.82 604.13 273.82 cv
@
604.13 281.53 mo
602.37 281.53 600.94 282.96 600.94 284.72 cv
600.94 302.83 li
600.94 304.6 599.52 306.02 597.76 306.02 cv
599.52 306.02 600.94 307.45 600.94 309.21 cv
600.94 327.33 li
600.94 329.09 602.37 330.51 604.13 330.51 cv
@
249.09 114.45 mo
250.86 114.45 252.28 115.88 252.28 117.64 cv
252.28 130.31 li
252.28 132.07 253.71 133.5 255.47 133.5 cv
253.71 133.5 252.28 134.93 252.28 136.69 cv
252.28 149.36 li
252.28 151.12 250.86 152.55 249.09 152.55 cv
@
249.09 188.24 mo
250.86 188.24 252.28 189.67 252.28 191.43 cv
252.28 214.02 li
252.28 215.79 253.71 217.21 255.47 217.21 cv
253.71 217.21 252.28 218.64 252.28 220.4 cv
252.28 242.99 li
252.28 244.76 250.86 246.18 249.09 246.18 cv
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/MFKJYY+VERDANA,BoldItalic*1 uf
/MFKJYY+VERDANA,BoldItalic uf
/GFNBAA+VERDANA,BoldItalic uf
/MFKJYX+VERDANA,Italic*1 uf
/MFKJYX+VERDANA,Italic uf
/QJJAAA+VERDANA,Italic uf
/MFKJYW+VERDANA,Bold*1 uf
/MFKJYW+VERDANA,Bold uf
/HIBBAA+VERDANA,Bold uf
/MFKJYV+VERDANA*1 uf
/MFKJYV+VERDANA uf
/PBAAAA+VERDANA uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
